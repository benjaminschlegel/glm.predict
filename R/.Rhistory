full_data = full_data[, -(pos_idx:ncol(full_data))]
full_data[,1] = as.factor(choices)
}
# remove weights column
if("(weights)" %in% colnames(full_data)){
full_data = full_data[,-which(colnames(full_data) == "(weights)")]
}
# remove polynomial values
full_data = full_data[, grep("^[^(][^:\\^]*$", colnames(full_data), value = T)]
if(length(unlist(strsplit(values, ";"))) != ncol(full_data) - 1){
stop("The length of values does not match the number of independend variables.")
}
if(!is.null(position) && (!is.numeric(position) || position != round(position))){
stop("position must be a whole number or NULL.")
}
position = NULL
if(!is.null(position) && (!is.numeric(position) || position != round(position))){
stop("position must be a whole number or NULL.")
}
if(inherits(model, "multinom")){
doPar = F
}
type = match.arg(type)
type = "simulation"
# remove any empty space in values
values = gsub("\\s","",values)
# get data
if(inherits(model,"polr") || inherits(model,"multinom") || inherits(model, "mlogit")){
if(!is.null(levels(full_data[,1]))){
dv_levels = levels(full_data[,1])
}else{
dv_levels = levels(as.factor(full_data[, 1]))
}
}else{
dv_levels = NULL
}
# data = full_data[,-1]  # data without y
matrix = stats::model.matrix(model)
# get base combinations
char_pos = which(sapply(full_data, is.character))
for(i in char_pos){
full_data[,i] = as.factor(full_data[,i])
}
temp = getBaseCombinations(full_data, matrix, values, model, dv_levels, position)
result = temp[["result"]]
temp = glm.predict:::getBaseCombinations(full_data, matrix, values, model, dv_levels, position)
values
values = "18-32;F"
temp = glm.predict:::getBaseCombinations(full_data, matrix, values, model, dv_levels, position)
temp = getBaseCombinations(full_data, matrix, values, model, dv_levels, position)
result = temp[["result"]]
if(is.null(position)){
base.combinations = temp[["base.combinations"]]
}else{
base.combinations_1 = temp[["base.combinations_1"]]
base.combinations_2 = temp[["base.combinations_2"]]
}
# add other things to base combinations
if(is.null(position)){
combinations = glm.predict:::getCombinations(matrix, base.combinations, model, dv_levels)
}else{
combinations_1 = getCombinations(matrix, base.combinations_1, model, dv_levels)
combinations_2 = getCombinations(matrix, base.combinations_2, model, dv_levels)
}
# simulate
if(is.null(position)){
if(is.null(dv_levels)){
result[, 1:3] = t(apply(combinations, 1, basepredict, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type))
}else{
temp = apply(combinations, 1, basepredict, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type)
result[, 1:3] = t(do.call(rbind,lapply(1:3, getResultMatrix, result_matrix = temp, levels = length(dv_levels), base.combinations = base.combinations)))
}
}else{
combinations = cbind(combinations_1,combinations_2)
if(is.null(dv_levels)){
result[, 1:9] = t(apply(combinations, 1, dc, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type))
result[,  c("val1_lower", "val1_upper", "val2_mean", "val2_upper", "dc_mean", "dc_lower")] =
result[,  c("val2_mean", "dc_mean", "val1_lower", "dc_lower", "val1_upper", "val2_upper")]
}else{
temp = apply(combinations, 1, dc, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type)
result[, 1:9] = t(do.call(rbind,lapply(1:9, getResultMatrix, result_matrix = temp, levels = length(dv_levels), base.combinations = base.combinations_1)))
}
}
dc.glmerMod = function(model, values = NULL, sim.count = 1000, conf.int = 0.95, sigma = NULL, set.seed = NULL, values1 = NULL, values2 = NULL,
type = c("any", "simulation", "bootstrap"), summary = TRUE){
# check inputs
if(is.null(values) && (is.null(values1) || is.null(values2))){
stop("Either values1 and values2 or values has to be specified!")
}
if(!is.null(values)){
l = length(values)
values1 = values[1 : (l/2)]
values2 = values[(l/2 + 1) : l]
}
if(sum("glmerMod" %in% class(model)) == 0){
stop("model has to be of type glm()")
}
if(length(values1) != length(fixef(model))){
stop("the length of values1 is not identical to the number of coefficient of the model")
}
if(length(values2) != length(fixef(model))){
stop("the length of values2 is not identical to the number of coefficient of the model")
}
if(!is.numeric(sim.count) | round(sim.count) != sim.count){
stop("sim.count has to be whole number")
}
if(!is.numeric(conf.int)){
stop("conf.int has to be numeric")
}
if(!is.null(set.seed) & !is.numeric(set.seed)){
stop("set.seed must be numeric")
}
type = match.arg(type)
# model type
model.type = family(model)
link = model.type[2]
if(type == "any"){
if(nrow(model$data) < 500){
type = "bootstrap"
message("Type not specified: Using bootstrap as n < 500")
}else{
type = "simulation"
message("Type not specified: Using simulation as n >= 500")
}
}
if(type == "simulation"){
if(is.null(sigma)){
sigma = stats::vcov(model)
}
if(nrow(sigma) != length(values1)){
warning("sigma and values do not match, ignoring the specified sigma")
sigma = vcov(model)
}
if(!is.null(set.seed)){
set.seed(set.seed)
}
betas_sim = MASS::mvrnorm(sim.count, fixef(model), sigma)
pred1 = calculate_glm_pred(betas_sim, values1, link)
pred2 = calculate_glm_pred(betas_sim, values2, link)
}else{ # bootstrap
boot = function(x, model){
data = model$data
sample_data = data[sample(seq_len(nrow(data)), replace = TRUE), ]
fixef(update(model, data = sample_data))
}
betas_boot = do.call('rbind', lapply(seq_len(sim.count), boot, model))
pred1 = calculate_glm_pred(betas_boot, values1, link)
pred2 = calculate_glm_pred(betas_boot, values2, link)
}
diff = pred1 - pred2
all = cbind(pred1, pred2, diff)
# return all simulated / bootstrapped values if summary is FALSE
if(!summary){
return(all)
}
confint_lower = (1 - conf.int) / 2
result = apply(all, 2, quantile, probs = c(confint_lower, 1 - confint_lower))
result = t(rbind(apply(all, 2, mean), result))
colnames(result) = c("Mean",
paste0(100 * confint_lower,"%"),
paste0(100 * (1 - confint_lower),"%"))
rownames(result) = c("Case 1", "Case 2", "Difference")
result
}
library(glm.predict)
model1 = lmer(lr_self ~ age + gender + (1 | canton), data=selects2015)
summary(model1)
library(lme4)
model1 = lmer(lr_self ~ age + gender + (1 | canton), data=selects2015)
summary(model1)
dc(model1, values1 = c(1,20,1),
values2 = c(1,20,0))
}
model1 = glmer(participation ~ age + gender + (1 | canton), data=selects2015)
summary(model1)
# comparing a 20 year old woman with a 20 year old man considering their probability to vote in the national election
dc(model1, values1 = c(1,20,1),
values2 = c(1,20,0))
model1
model1 = glmer(participation ~ age + gender + (1 | canton), family="binomial", data=selects2015)
class(model1)
dc(model1, values1 = c(1,20,1),
values2 = c(1,20,0))
model.frame(model1)
dc.glmerMod = function(model, values = NULL, sim.count = 1000, conf.int = 0.95, sigma = NULL, set.seed = NULL, values1 = NULL, values2 = NULL,
type = c("any", "simulation", "bootstrap"), summary = TRUE){
# check inputs
if(is.null(values) && (is.null(values1) || is.null(values2))){
stop("Either values1 and values2 or values has to be specified!")
}
if(!is.null(values)){
l = length(values)
values1 = values[1 : (l/2)]
values2 = values[(l/2 + 1) : l]
}
if(sum("glmerMod" %in% class(model)) == 0){
stop("model has to be of type glm()")
}
if(length(values1) != length(fixef(model))){
stop("the length of values1 is not identical to the number of coefficient of the model")
}
if(length(values2) != length(fixef(model))){
stop("the length of values2 is not identical to the number of coefficient of the model")
}
if(!is.numeric(sim.count) | round(sim.count) != sim.count){
stop("sim.count has to be whole number")
}
if(!is.numeric(conf.int)){
stop("conf.int has to be numeric")
}
if(!is.null(set.seed) & !is.numeric(set.seed)){
stop("set.seed must be numeric")
}
type = match.arg(type)
# model type
model.type = family(model)
link = model.type[2]
if(type == "any"){
if(nrow(model$data) < 500){
type = "bootstrap"
message("Type not specified: Using bootstrap as n < 500")
}else{
type = "simulation"
message("Type not specified: Using simulation as n >= 500")
}
}
if(type == "simulation"){
if(is.null(sigma)){
sigma = stats::vcov(model)
}
if(nrow(sigma) != length(values1)){
warning("sigma and values do not match, ignoring the specified sigma")
sigma = vcov(model)
}
if(!is.null(set.seed)){
set.seed(set.seed)
}
betas_sim = MASS::mvrnorm(sim.count, fixef(model), sigma)
pred1 = calculate_glm_pred(betas_sim, values1, link)
pred2 = calculate_glm_pred(betas_sim, values2, link)
}else{ # bootstrap
boot = function(x, model){
data = model.frame(model)
sample_data = data[sample(seq_len(nrow(data)), replace = TRUE), ]
fixef(update(model, data = sample_data))
}
betas_boot = do.call('rbind', lapply(seq_len(sim.count), boot, model))
pred1 = calculate_glm_pred(betas_boot, values1, link)
pred2 = calculate_glm_pred(betas_boot, values2, link)
}
diff = pred1 - pred2
all = cbind(pred1, pred2, diff)
# return all simulated / bootstrapped values if summary is FALSE
if(!summary){
return(all)
}
confint_lower = (1 - conf.int) / 2
result = apply(all, 2, quantile, probs = c(confint_lower, 1 - confint_lower))
result = t(rbind(apply(all, 2, mean), result))
colnames(result) = c("Mean",
paste0(100 * confint_lower,"%"),
paste0(100 * (1 - confint_lower),"%"))
rownames(result) = c("Case 1", "Case 2", "Difference")
result
}
dc(model1, values1 = c(1,20,1),
values2 = c(1,20,0))
dc.glmerMod = function(model, values = NULL, sim.count = 1000, conf.int = 0.95, sigma = NULL, set.seed = NULL, values1 = NULL, values2 = NULL,
type = c("any", "simulation", "bootstrap"), summary = TRUE){
# check inputs
if(is.null(values) && (is.null(values1) || is.null(values2))){
stop("Either values1 and values2 or values has to be specified!")
}
if(!is.null(values)){
l = length(values)
values1 = values[1 : (l/2)]
values2 = values[(l/2 + 1) : l]
}
if(sum("glmerMod" %in% class(model)) == 0){
stop("model has to be of type glm()")
}
if(length(values1) != length(fixef(model))){
stop("the length of values1 is not identical to the number of coefficient of the model")
}
if(length(values2) != length(fixef(model))){
stop("the length of values2 is not identical to the number of coefficient of the model")
}
if(!is.numeric(sim.count) | round(sim.count) != sim.count){
stop("sim.count has to be whole number")
}
if(!is.numeric(conf.int)){
stop("conf.int has to be numeric")
}
if(!is.null(set.seed) & !is.numeric(set.seed)){
stop("set.seed must be numeric")
}
type = match.arg(type)
# model type
model.type = family(model)
link = model.type[2]
if(type == "any"){
if(nrow(model$data) < 500){
type = "bootstrap"
message("Type not specified: Using bootstrap as n < 500")
}else{
type = "simulation"
message("Type not specified: Using simulation as n >= 500")
}
}
if(type == "simulation"){
if(is.null(sigma)){
sigma = stats::vcov(model)
}
if(nrow(sigma) != length(values1)){
warning("sigma and values do not match, ignoring the specified sigma")
sigma = vcov(model)
}
if(!is.null(set.seed)){
set.seed(set.seed)
}
betas_sim = MASS::mvrnorm(sim.count, fixef(model), sigma)
pred1 = calculate_glm_pred(betas_sim, values1, link)
pred2 = calculate_glm_pred(betas_sim, values2, link)
}else{ # bootstrap
boot = function(x, model){
data = model.frame(model)
sample_data = data[sample(seq_len(nrow(data)), replace = TRUE), ]
fixef(update(model, data = sample_data))
}
betas_boot = do.call('rbind', lapply(seq_len(sim.count), boot, model))
pred1 = calculate_glm_pred(betas_boot, values1, link)
pred2 = calculate_glm_pred(betas_boot, values2, link)
}
diff = pred1 - pred2
all = cbind(pred1, pred2, diff)
# return all simulated / bootstrapped values if summary is FALSE
if(!summary){
return(all)
}
confint_lower = (1 - conf.int) / 2
result = apply(all, 2, quantile, probs = c(confint_lower, 1 - confint_lower))
result = t(rbind(apply(all, 2, mean), result))
colnames(result) = c("Mean",
paste0(100 * confint_lower,"%"),
paste0(100 * (1 - confint_lower),"%"))
rownames(result) = c("Case 1", "Case 2", "Difference")
result
}
dc(model1, values1 = c(1,20,1),
values2 = c(1,20,0))
dc.glmerMod = function(model, values = NULL, sim.count = 1000, conf.int = 0.95, sigma = NULL, set.seed = NULL, values1 = NULL, values2 = NULL,
type = c("any", "simulation", "bootstrap"), summary = TRUE){
# check inputs
if(is.null(values) && (is.null(values1) || is.null(values2))){
stop("Either values1 and values2 or values has to be specified!")
}
if(!is.null(values)){
l = length(values)
values1 = values[1 : (l/2)]
values2 = values[(l/2 + 1) : l]
}
if(sum("glmerMod" %in% class(model)) == 0){
stop("model has to be of type glm()")
}
if(length(values1) != length(fixef(model))){
stop("the length of values1 is not identical to the number of coefficient of the model")
}
if(length(values2) != length(fixef(model))){
stop("the length of values2 is not identical to the number of coefficient of the model")
}
if(!is.numeric(sim.count) | round(sim.count) != sim.count){
stop("sim.count has to be whole number")
}
if(!is.numeric(conf.int)){
stop("conf.int has to be numeric")
}
if(!is.null(set.seed) & !is.numeric(set.seed)){
stop("set.seed must be numeric")
}
type = match.arg(type)
# model type
model.type = family(model)
link = model.type[2]
if(type == "any"){
if(nrow(model.frame(model)) < 500){
type = "bootstrap"
message("Type not specified: Using bootstrap as n < 500")
}else{
type = "simulation"
message("Type not specified: Using simulation as n >= 500")
}
}
if(type == "simulation"){
if(is.null(sigma)){
sigma = stats::vcov(model)
}
if(nrow(sigma) != length(values1)){
warning("sigma and values do not match, ignoring the specified sigma")
sigma = vcov(model)
}
if(!is.null(set.seed)){
set.seed(set.seed)
}
betas_sim = MASS::mvrnorm(sim.count, fixef(model), sigma)
pred1 = calculate_glm_pred(betas_sim, values1, link)
pred2 = calculate_glm_pred(betas_sim, values2, link)
}else{ # bootstrap
boot = function(x, model){
data = model.frame(model)
sample_data = data[sample(seq_len(nrow(data)), replace = TRUE), ]
fixef(update(model, data = sample_data))
}
betas_boot = do.call('rbind', lapply(seq_len(sim.count), boot, model))
pred1 = calculate_glm_pred(betas_boot, values1, link)
pred2 = calculate_glm_pred(betas_boot, values2, link)
}
diff = pred1 - pred2
all = cbind(pred1, pred2, diff)
# return all simulated / bootstrapped values if summary is FALSE
if(!summary){
return(all)
}
confint_lower = (1 - conf.int) / 2
result = apply(all, 2, quantile, probs = c(confint_lower, 1 - confint_lower))
result = t(rbind(apply(all, 2, mean), result))
colnames(result) = c("Mean",
paste0(100 * confint_lower,"%"),
paste0(100 * (1 - confint_lower),"%"))
rownames(result) = c("Case 1", "Case 2", "Difference")
result
}
dc(model1, values1 = c(1,20,1),
values2 = c(1,20,0))
calculate_glm_pred = function(betas, x, link){
yhat = betas %*% x
# the inverse link functions
if(link == "logit"){
return(exp(yhat) / (1 + exp(yhat)))
}
if(link == "log"){
return(exp(yhat))
}
if(link == "identity"){
return(yhat)
}
if(link == "probit"){
return(pnorm(yhat))
}
if(link == "cauchit"){
return(tan(pi * (yhat - 0.5)))
}
if(link == "cloglog"){
return(exp(-exp(yhat)) * (-1 + exp(exp(yhat))))
}
if(link == "sqrt"){
return(yhat * yhat)
}
if(link == "1/mu^2"){
return(1 / sqrt(yhat))
}
if(link == "inverse"){
return(1 / yhat)
}
}
dc(model1, values1 = c(1,20,1),
values2 = c(1,20,0))
devtools::install_github("benjaminschlegel/glm.predict")
TRUE | FALSE
1 & 2
1 &% 2
1 && 2
2 && 3
0 && 3
bitwNot(4)
bitwNot(3)
bitwNot(3L)
bitwNot(3.3)
bitwNot(9)
bitwNot(2)
bitwNot(0)
bitwNot(-1)
bitwNot(c(TRUE, TRUE, FALSE))
bitwNot(TRUE)
bitwNot(b10)
?bitwNot
bitwShiftL(4)
bitwShiftL(4,2)
bitwShiftL(4,3)
bitwShiftL(5,3)
bitwShiftL(2,8)
bitwShiftL(2,10)
bitwShiftL(1,10)
2^10
bitwShiftL(3,9)
bitwShiftL(1,31)
bitwShiftL(0,31)
bitwShiftL(1,30)
2^30
devtools::install_github("benjaminschlegel/schlegel")
devtools::install_github("benjaminschlegel/glm.predict")
library(glm.predict)
install.packages("dfidx")
install.packages("dfidx")
library(glm.predict)
model_glm = glm(participation ~ gender + age + opinion_eu_membership, data = selects2015,
family = "binomial")
summary(model_glm)
predicts(model_glm, "2;mean;median")
devtools::install_github("benjaminschlegel/glm.predict")
install.packages("processx")
devtools::install_github("benjaminschlegel/glm.predict")
devtools::install_github("benjaminschlegel/glm.predict")
