# add other things to base combinations
if(is.null(position)){
combinations = getCombinations(matrix, base.combinations, model, dv_levels)
}else{
combinations_1 = getCombinations(matrix, base.combinations_1, model, dv_levels)
combinations_2 = getCombinations(matrix, base.combinations_2, model, dv_levels)
}
combinations
predicts = function(model, values, position = NULL, sim.count = 1000, conf.int=0.95, sigma = NULL, set.seed = NULL, doPar = FALSE,
type = c("any", "simulation", "bootstrap")){
if(!is.character(values)){
stop("values must be given as character!")
}
if("vglm" %in% class(model)){
full_data = VGAM::model.frame(model)
}else{
full_data =  stats::model.frame(model)
}
if(any(c("lmerMod", "glmerMod") %in% class(model))){
full_data = full_data[,-which(colnames(full_data) %in% names(ranef(model)))]
}
# collapse values to one character, if given as vector
if(length(values) > 1){
values = paste(values, collapse = ";")
}
if("tobit" %in% class(model)){
colnames(full_data)[1] = "y"
}
# reshape mlogit data
if("dfidx" %in% class(full_data)){
choices = levels(full_data$idx[[2]])
full_data = as.data.frame(full_data)
pos_idx = which(colnames(full_data) == "idx")
full_data = full_data[, -(pos_idx:ncol(full_data))]
full_data[,1] = as.factor(choices)
}
# remove weights column
if("(weights)" %in% colnames(full_data)){
full_data = full_data[,-which(colnames(full_data) == "(weights)")]
}
# remove polynomial values
full_data = full_data[, grep("^[^(][^:\\^]*$", colnames(full_data), value = TRUE)]
if(length(unlist(strsplit(values, ";"))) != ncol(full_data) - 1){
stop("The length of values does not match the number of independend variables.")
}
if(!is.null(position) && (!is.numeric(position) || position != round(position))){
stop("position must be a whole number or NULL.")
}
if(inherits(model, "multinom") && doPar){
doPar = FALSE
warning("Parallel version not supported for multinom() models. Setting doPar to FALSE.")
}
type = match.arg(type)
if(type == "any"){
if(nrow(full_data) < 500){
type = "bootstrap"
message("Type not specified: Using bootstrap as n < 500")
}else{
type = "simulation"
message("Type not specified: Using simulation as n >= 500")
}
}
# remove any empty space in values
values = gsub("\\s","",values)
# get data
if(inherits(model,"polr") || inherits(model,"multinom") || inherits(model, "mlogit")){
if(!is.null(levels(full_data[,1]))){
dv_levels = levels(full_data[,1])
}else{
dv_levels = levels(as.factor(full_data[, 1]))
}
}else if(inherits(model,"vglm")){
dv_levels = model@extra$colnames.y
}else{
dv_levels = NULL
}
# data = full_data[,-1]  # data without y
matrix = stats::model.matrix(model)
# get base combinations
char_pos = which(sapply(full_data, is.character))
for(i in char_pos){
full_data[,i] = as.factor(full_data[,i])
}
temp = getBaseCombinations(full_data, matrix, values, model, dv_levels, position)
result = temp[["result"]]
if(is.null(position)){
base.combinations = temp[["base.combinations"]]
}else{
base.combinations_1 = temp[["base.combinations_1"]]
base.combinations_2 = temp[["base.combinations_2"]]
}
# add other things to base combinations
if(is.null(position)){
combinations = getCombinations(matrix, base.combinations, model, dv_levels)
}else{
combinations_1 = getCombinations(matrix, base.combinations_1, model, dv_levels)
combinations_2 = getCombinations(matrix, base.combinations_2, model, dv_levels)
}
chk <- Sys.getenv("_R_CHECK_LIMIT_CORES_", "")
if (nzchar(chk) && chk == "TRUE") {
# use 2 cores in CRAN/Travis/AppVeyor
cores <- 2L
} else {
# use all cores in devtools::test()
cores <- parallel::detectCores()
}
if(doPar && cores > 1){
# set up parallel cluster
cl = parallel::makeCluster(cores)
if(is.null(position)){
parallel::clusterExport(cl, varlist = c("basepredict.lm","basepredict.glm","basepredict.polr","basepredict.multinom","basepredict.tobit", "calculate_glm_pred", "basepredict.mlogit"), envir=environment())
parallel::clusterEvalQ(cl, library("MASS"))
parallel::clusterEvalQ(cl, library("nnet"))
parallel::clusterEvalQ(cl, library("mlogit"))
parallel::clusterEvalQ(cl, library("dfidx"))
# simulate
if(is.null(dv_levels)){
result[, 1:3] = t(parallel::parApply(cl, combinations, 1, basepredict, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type))
}else{
temp = parallel::parApply(cl, combinations, 1, basepredict, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type)
result[, 1:3] = t(do.call(rbind,lapply(1:3, getResultMatrix, result_matrix = temp, levels = length(dv_levels), base.combinations = base.combinations)))
}
}else{
parallel::clusterExport(cl, varlist = c("dc.lm", "dc.glm","dc.polr","dc.multinom", "calculate_glm_pred", "dc.tobit", "dc.mlogit"), envir=environment())
parallel::clusterEvalQ(cl, library("MASS"))
parallel::clusterEvalQ(cl, library("nnet"))
parallel::clusterEvalQ(cl, library("mlogit"))
parallel::clusterEvalQ(cl, library("dfidx"))
# simulate
combinations = cbind(combinations_1,combinations_2)
if(is.null(dv_levels)){
result[, 1:9] = t(parallel::parApply(cl, combinations, 1, dc, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type))
result[,  c("val1_lower", "val1_upper", "val2_mean", "val2_upper", "dc_mean", "dc_lower")] =
result[,  c("val2_mean", "dc_mean", "val1_lower", "dc_lower", "val1_upper", "val2_upper")]
}else{
temp = parallel::parApply(cl, combinations, 1, dc,  model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type)
result[, 1:9] = t(do.call(rbind,lapply(1:9, getResultMatrix, result_matrix = temp, levels = length(dv_levels), base.combinations = base.combinations_1)))
}
}
# stop parallel cluster
parallel::stopCluster(cl)
}else{
# simulate
if(is.null(position)){
if(is.null(dv_levels)){
result[, 1:3] = t(apply(combinations, 1, basepredict, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type))
}else{
temp = apply(combinations, 1, basepredict, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type)
result[, 1:3] = t(do.call(rbind,lapply(1:3, getResultMatrix, result_matrix = temp, levels = length(dv_levels), base.combinations = base.combinations)))
}
}else{
combinations = cbind(combinations_1,combinations_2)
if(is.null(dv_levels)){
result[, 1:9] = t(apply(combinations, 1, dc, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type))
result[,  c("val1_lower", "val1_upper", "val2_mean", "val2_upper", "dc_mean", "dc_lower")] =
result[,  c("val2_mean", "dc_mean", "val1_lower", "dc_lower", "val1_upper", "val2_upper")]
}else{
temp = apply(combinations, 1, dc, model = model, sim.count = sim.count, conf.int = conf.int, sigma = sigma, set.seed = set.seed, type = type)
result[, 1:9] = t(do.call(rbind,lapply(1:9, getResultMatrix, result_matrix = temp, levels = length(dv_levels), base.combinations = base.combinations_1)))
}
}
}
# return result data.frame
result
}
predicts(model1, "|1,2,3,4|,5,5,5,5,5;0;all")
basepredict.glm = function(model, values, sim.count = 1000, conf.int = 0.95, sigma = NULL, set.seed = NULL,
type = c("any", "simulation", "bootstrap"), summary = TRUE){
# check inputs
if(sum("glm" %in% class(model)) == 0){
stop("model has to be of type glm()")
}
if(length(values) != length(coef(model))){
stop("the length of values is not identical to the number of coefficient of the model")
}
if(!is.numeric(sim.count) | round(sim.count) != sim.count){
stop("sim.count has to be whole number")
}
if(!is.numeric(conf.int)){
stop("conf.int has to be numeric")
}
if(!is.null(set.seed) & !is.numeric(set.seed)){
stop("set.seed must be numeric")
}
type = match.arg(type)
if(type == "bootstrap" && "svyglm" %in% class(model)){
warning("Boostrap not supported for survey()-models, using simulations instead.")
type = "simulation"
}
# model type
model.type = family(model)
link = model.type[2]
if(type == "any"){
if("svyglm" %in% class(model)){
type = "simulation"
}else if(nrow(model$data) < 500){
type = "bootstrap"
message("Type not specified: Using bootstrap as n < 500")
}else{
type = "simulation"
message("Type not specified: Using simulation as n >= 500")
}
}
if(type == "simulation"){
if(is.null(sigma)){
sigma = stats::vcov(model)
}
if(nrow(sigma) != length(values)){
warning("sigma and values do not match, ignoring the specified sigma")
sigma = stats::vcov(model)
}
if(!is.null(set.seed)){
set.seed(set.seed)
}
betas_sim = MASS::mvrnorm(sim.count, coef(model), sigma)
# get the predicted probabilities/values with the inverse link function
pred = calculate_glm_pred(betas_sim, values, link)
}else{ # bootstrap
boot = function(x, model){
data = model$data
sample_data = data[sample(seq_len(nrow(data)), replace = TRUE), ]
if("(weights)" %in% colnames(data)){
coef(update(model, data = sample_data, weights = `(weights)`))
}else{
coef(update(model, data = sample_data))
}
}
betas_boot = do.call('rbind', lapply(seq_len(sim.count), boot, model))
# get the predicted probabilities/values with the inverse link function
pred = calculate_glm_pred(betas_boot, values, link)
}
# return all simulated / bootstrapped values if summary is FALSE
if(!summary){
return(pred)
}
# calculate mean and confident interval
confint_lower = (1 - conf.int) / 2
result = t(as.matrix(c(mean(pred, na.rm = TRUE),
quantile(pred, c(confint_lower, 1 - confint_lower), na.rm = TRUE))))
# name the output matrix
colnames(result) = c("Mean",
paste0(100 * confint_lower,"%"),
paste0(100 * (1 - confint_lower),"%"))
result
}
calculate_glm_pred = function(betas, x, link){
yhat = betas %*% x
# the inverse link functions
if(link == "logit"){
return(exp(yhat) / (1 + exp(yhat)))
}
if(link == "log"){
return(exp(yhat))
}
if(link == "identity"){
return(yhat)
}
if(link == "probit"){
return(pnorm(yhat))
}
if(link == "cauchit"){
return(tan(pi * (yhat - 0.5)))
}
if(link == "cloglog"){
return(exp(-exp(yhat)) * (-1 + exp(exp(yhat))))
}
if(link == "sqrt"){
return(yhat * yhat)
}
if(link == "1/mu^2"){
return(1 / sqrt(yhat))
}
if(link == "inverse"){
return(1 / yhat)
}
}
basepredict.mlogit = function(model, values, sim.count=1000, conf.int=0.95, sigma=NULL, set.seed=NULL,
type = c("any", "simulation", "bootstrap"), summary = TRUE){
# check inputs
if(sum("mlogit" %in% class(model)) == 0){
stop("model has to be of type mlogit()")
}
choices = names(model$freq)
beta_names = names(coef(model))
n_multinomial = do.call(sum, lapply(choices, grepl, beta_names))
n_conditional = length(beta_names) - n_multinomial
if(length(values) != n_multinomial / (length(choices) - 1) + n_conditional){
stop("the length of values is not identical to the number of coefficient of the model")
}
if(!is.numeric(sim.count) | round(sim.count) != sim.count){
stop("sim.count has to be whole number")
}
if(!is.numeric(conf.int)){
stop("conf.int has to be numeric")
}
if(!is.null(set.seed) & !is.numeric(set.seed)){
stop("set.seed must be numeric")
}
for(v in values){
if(length(v) != length(choices)-1 & length(v) != 1){
stop("values need to be of length 1 or length of choices-1")
}
}
type = match.arg(type)
if(type == "bootstrap"){
warning("Bootstrap not supported for mlogit. Using simulation instead.")
}
type = "simulation"
betas = coef(model)
if(is.null(sigma)){
sigma = vcov(model)
}
# simulation
betas_draw = MASS::mvrnorm(sim.count, betas, sigma)
pred = matrix(nrow = length(choices), ncol = sim.count)
for(i in 1:sim.count){
current_betas = betas_draw[i,]
n = length(choices) - 1
pos_conditional_vars = (n+1):(n+n_conditional)
pos_multinomial_vars = max(pos_conditional_vars) +
(seq_len((length(betas) - max(pos_conditional_vars)) / n) - 1) * n
sim_temp = current_betas[seq_len(n)]
for(pos in pos_conditional_vars){
sim_temp = cbind(sim_temp, current_betas[pos])
}
for(j in pos_multinomial_vars){
sim_temp = cbind(sim_temp, current_betas[j + seq_len(n)])
}
yhat = c(0, diag(sim_temp %*% t(as.matrix(expand.grid(values)))))
e = exp(yhat)
for(j in seq_along(choices)){
pred[j, i] = e[j] / sum(e)
}
}
# return all simulated
if(!summary){
return(pred)
}
confint_lower = (1 - conf.int) / 2
result = matrix(nrow = n + 1, ncol = 3)
colnames(result) = c("mean",
paste0(100 * confint_lower, "%"),
paste0(100 * (1 - confint_lower), "%"))
rownames(result) = choices
for(j in 1:(n+1)){
result[j,] = c(mean(pred[j,]), quantile(pred[j,],probs = c(confint_lower, 1 - confint_lower)))
}
result
}
predicts(model1, "|1,2,3,4|,5,5,5,5,5;0;all")
basepredict = function(model, values, sim.count = 1000, conf.int = 0.95, sigma=NULL, set.seed=NULL,
type = c("any", "simulation", "bootstrap"), summary = TRUE){
UseMethod("basepredict")
}
predicts(model1, "|1,2,3,4|,5,5,5,5,5;0;all")
getResultMatrix = function(part_y, levels, result_matrix, base.combinations){
return(unlist(lapply(1:length(base.combinations[,1]), getMatrixPart, part_y = part_y, levels = levels, result_matrix = result_matrix)))
}
getMatrixPart = function(part_x, part_y, levels, result_matrix){
from = levels * (part_y - 1) + 1
to = from + levels - 1
return(result_matrix[from:to, part_x])
}
predicts(model1, "|1,2,3,4|,5,5,5,5,5;0;all")
predicts(model1, "|1,2,3,4|,5,5,5,5,5;0;all", position = 1)
predicts(model1, "|1,2,3,4|,5,5,5,5,5;0;all", position = 1)
getBaseCombinations = function(data, matrix, values, model, dv_levels = NULL, position = NULL){
result = initialize_data.frame(data, position = position)
log.pos = result$log.pos # at which positions are logarithms?
result = result$result
# get values from character
value = getValues(values, data)
values.list = value[[1]]
is.factor = value[[2]]
# get products for combination calculation
products = getProducts(value, position)
# initialize variables
n = length(values.list)
rows = products[length(products)]
# get base combinations and labels for result
if(inherits(model, "mlogit")){ # mlogit matrix is differently shaped
cnames = colnames(matrix)
for(choice in dv_levels){
cnames = gsub(paste0(":", choice), "", cnames)
}
cnames = unique(cnames)
}else if(inherits(model, "vglm")){
cnames = colnames(matrix)
cnames = unique(gsub(":[1-9]+", "", cnames))
}else{
cnames = colnames(matrix)
}
value.names = grep("^[^(][^:\\^]*$",cnames, value = T)
base.combinations = as.data.frame(matrix(NA, nrow = rows, ncol = length(value.names)))
colnames(base.combinations) = value.names
if(!is.null(position)){
base.combinations_1 = base.combinations_2 = base.combinations
}
for(r in 1:rows){
if(is.null(position)){
data.frame.position = length(result) - n + 1
}else{
data.frame.position = length(result) - n
}
c = 1
for(i in 1:n){
current.product = products[i]
current.values = values.list[[i]]
if(i == 1){
preproduct = 1
}else{
preproduct = products[i-1]
}
v1 = floor((r - 1) %% current.product / preproduct) + 1
if(!is.null(position) && i == position && is.factor[i]){
combinations = getFactorCombinations(length(current.values[,1]))
f.v1 = combinations[v1,1]
f.v2 = combinations[v1,2]
base.combinations_1[r,c:(c + length(current.values[f.v1,]) - 1)] = current.values[f.v1,]
base.combinations_2[r,c:(c + length(current.values[f.v1,]) - 1)] = current.values[f.v2,]
# labels
label_pos1 = which(current.values[f.v1,]==1)
label_pos2 = which(current.values[f.v2,]==1)
label_pos1 = ifelse(length(label_pos1) == 0, 1, label_pos1 + 1)
label_pos2 = ifelse(length(label_pos2) == 0, 1, label_pos2 + 1)
result[r, data.frame.position] = getLabel(data, i, label_pos1)
result[r, data.frame.position + 1] = getLabel(data, i, label_pos2)
data.frame.position = data.frame.position + 2
c = c + length(current.values[f.v1,])
}else if(!is.null(position) && i == position){
v2 = v1 + 1
if(is.list(current.values)){
base.combinations_1[r,c:(c + length(current.values[v1]) - 1)][[1]] = list(sapply(current.values, function(x){ ifelse(length(x) == 1, x, x[v1]) }))
base.combinations_2[r,c:(c + length(current.values[v1]) - 1)][[1]] = list(sapply(current.values, function(x){ ifelse(length(x) == 1, x, x[v2]) }))
# labels
result[r,data.frame.position] = current.values[v1]
result[r,data.frame.position+1] = current.values[v2]
}else{
base.combinations_1[r,c:(c + length(current.values[v1]) - 1)][[1]] = current.values[v1]
base.combinations_2[r,c:(c + length(current.values[v1]) - 1)][[1]] = current.values[v2]
# labels
result[r,data.frame.position] = current.values[v1]
result[r,data.frame.position+1] = current.values[v2]
}
data.frame.position = data.frame.position + 2
c = c + length(current.values[v1])
}else if(is.factor[i]){
if(is.null(position)){
base.combinations[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
}else{
base.combinations_1[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
base.combinations_2[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
}
c = c + length(current.values[v1,])
# labels
pos = 1
for(p in 1:length(current.values[v1,])){
if(current.values[v1,][p]==1){
pos = p + 1
}
}
result[r, data.frame.position] = getLabel(data,i,pos)
data.frame.position = data.frame.position + 1
}else{
if(is.null(position)){
if(is.list(current.values)){
base.combinations[r, c][[1]] = list(sapply(current.values, function(x){ ifelse(length(x) == 1, x, x[v1]) }))
}else{
base.combinations[r, c] = current.values[v1]
}
}else{
if(is.list(current.values)){
base.combinations_1[r, c][[1]] = list(sapply(current.values, function(x){ ifelse(length(x) == 1, x, x[v1]) }))
base.combinations_2[r, c][[1]] = list(sapply(current.values, function(x){ ifelse(length(x) == 1, x, x[v1]) }))
}else{
base.combinations_1[r, c] = current.values[v1]
base.combinations_2[r, c] = current.values[v1]
}
}
# labels
if(data.frame.position %in% log.pos){
if(is.list(current.values)){
result[r, data.frame.position] = exp(current.values[[which(sapply(current.values, length) > 1)]][v1])
}else{
result[r, data.frame.position] = exp(current.values[v1])
}
}else{
if(is.list(current.values)){
result[r, data.frame.position] = current.values[[which(sapply(current.values, length) > 1)]][v1]
}else{
result[r, data.frame.position] = current.values[v1]
}
}
data.frame.position = data.frame.position + 1
c = c + 1
}
}
}
if(!is.null(dv_levels)){
dv_levels.vector = rep(dv_levels, length(result[,1]))
result = result[rep(row.names(result),length(dv_levels)),]
result = result[order(as.numeric(rownames(result))),]
rownames(result) = 1:length(result[,1])
result$level = dv_levels.vector
}
if(is.null(position)){
return(list(result=result, base.combinations = base.combinations))
}else{
return(list(result=result, base.combinations_1 = base.combinations_1, base.combinations_2 = base.combinations_2))
}
}
predicts(model1, "|1,2,3,4|,5,5,5,5,5;0;all", position = 1)
