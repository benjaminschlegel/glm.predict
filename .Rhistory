values = paste(values, collapse = ";")
}
if("tobit" %in% class(model)){
colnames(full_data)[1] = "y"
}
# reshape mlogit data
if("dfidx" %in% class(full_data)){
choices = levels(full_data$idx[[2]])
full_data = as.data.frame(full_data)
pos_idx = which(colnames(full_data) == "idx")
full_data = full_data[, -(pos_idx:ncol(full_data))]
full_data[,1] = as.factor(choices)
}
# remove weights column
if("(weights)" %in% colnames(full_data)){
full_data = full_data[,-which(colnames(full_data) == "(weights)")]
}
# remove polynomial values
full_data = full_data[, grep("^[^(][^:\\^]*$", colnames(full_data), value = TRUE)]
if(length(unlist(strsplit(values, ";"))) != ncol(full_data) - 1){
stop("The length of values does not match the number of independend variables.")
}
if(!is.null(position) && (!is.numeric(position) || position != round(position))){
stop("position must be a whole number or NULL.")
}
if(inherits(model, "multinom") && doPar){
doPar = FALSE
warning("Parallel version not supported for multinom() models. Setting doPar to FALSE.")
}
type = match.arg(type)
type = "simulation"
# remove any empty space in values
values = gsub("\\s","",values)
# get data
if(inherits(model,"polr") || inherits(model,"multinom") || inherits(model, "mlogit")){
if(!is.null(levels(full_data[,1]))){
dv_levels = levels(full_data[,1])
}else{
dv_levels = levels(as.factor(full_data[, 1]))
}
}else if(inherits(model,"vglm")){
dv_levels = model@extra$colnames.y
}else{
dv_levels = NULL
}
# data = full_data[,-1]  # data without y
matrix = stats::model.matrix(model)
# get base combinations
char_pos = which(sapply(full_data, is.character))
for(i in char_pos){
full_data[,i] = as.factor(full_data[,i])
}
temp = glm.predict:::getBaseCombinations(full_data, matrix, values, model, dv_levels, position)
temp
result = temp[["result"]]
if(is.null(position)){
base.combinations = temp[["base.combinations"]]
}else{
base.combinations_1 = temp[["base.combinations_1"]]
base.combinations_2 = temp[["base.combinations_2"]]
}
base.combinations
combinations = glm.predict:::getCombinations(matrix, base.combinations, model, dv_levels)
combinations
model = glm(participation ~ age * gender, data =schlegel::selects2015)
glm.predict::predicts(model, "18;0")
glm.predict::predicts(model, "18;1")
library(devtools)
install()
devtools::load_all()
predicts(model, "18;0")
devtools::load_all()
predicts(model, "18;0")
predicts(model, "18:10")
predicts(model, "18:20,1")
predicts(model, "18:20;1")
df = frame.frame(x = 1:10, `(weights)` = 1:10)
df = data.frame(x = 1:10, `(weights)` = 1:10)
df
colnames(df) = c("x", "(weights)")
df
"(weights)" %in% colnames(df)
"(weights)" %in% colnames(df)[1]
devtools::load_all()
m_lm = lm(lr_self ~ gender + age, data = selects2015, weights = weight_total)
m_lm
predicts(m_lm, "1;18", type = "bootstrap")
predicts(m_lm, "0;18", type = "bootstrap")
install()
devtools::install()
df_selects = schlegel::selects2015
df_selects_withoutNA = df_selects %>%
filter(vote_choice != "other") %>%
mutate(vote_choice = factor(vote_choice)) %>%
select(age, gender, vote_choice, starts_with("lr_")) %>%
na.omit()
df_selects = schlegel::selects2015
df_selects_withoutNA = df_selects |>
filter(vote_choice != "other") |>
mutate(vote_choice = factor(vote_choice)) |>
select(age, gender, vote_choice, starts_with("lr_")) |>
na.omit()
df_selects = schlegel::selects2015
df_selects_withoutNA = df_selects |>
dplyr::filter(vote_choice != "other") |>
dplyr::mutate(vote_choice = factor(vote_choice)) |>
dplyr::select(age, gender, vote_choice, starts_with("lr_")) |>
na.omit()
mlogit_data = dfidx::dfidx(df_selects_withoutNA, varying = 5:11,
sep = "_", shape = "wide",
choice = "vote_choice")
mlogit_data$distance = abs(mlogit_data$lr - mlogit_data$lr_self)
model1 = mlogit::mlogit(vote_choice ~ distance | lr_self +
gender, data = mlogit_data)
summary(model1)
model = model1
values = c(1, 2, 0, 0)
# check inputs
if(sum("mlogit" %in% class(model)) == 0){
stop("model has to be of type mlogit()")
}
choices = names(model$freq)
sim.count=1000
conf.int=0.95
sigma=NULL
set.seed=NULL
type = "any"
summary = TRUE
choices = names(model$freq)
beta_names = names(coef(model))
n_multinomial = do.call(sum, lapply(choices, grepl, beta_names))
n_conditional = length(beta_names) - n_multinomial
if(length(values) != n_multinomial / (length(choices) - 1) + n_conditional){
stop("the length of values is not identical to the number of coefficient of the model")
}
if(!is.numeric(sim.count) | round(sim.count) != sim.count){
stop("sim.count has to be whole number")
}
if(!is.numeric(conf.int)){
stop("conf.int has to be numeric")
}
if(!is.null(set.seed) & !is.numeric(set.seed)){
stop("set.seed must be numeric")
}
if(type == "bootstrap"){
warning("Bootstrap not supported for mlogit. Using simulation instead.")
}
type = "simulation"
betas = coef(model)
if(is.null(sigma)){
sigma = vcov(model)
}
# simulation
betas_draw = MASS::mvrnorm(sim.count, betas, sigma)
betas_draw
pred = matrix(nrow = length(choices), ncol = sim.count)
pred
i = 1
current_betas = betas_draw[i,]
current_betas
length(choices) - 1
n = length(choices) - 1
n
pos_conditional_vars = (n+1):(n+n_conditional)
pos_conditional_vars
pos_multinomial_vars = max(pos_conditional_vars) +
(seq_len((length(betas) - max(pos_conditional_vars)) / n) - 1) * n
pos_multinomial_vars
n_conditional
model1
sim_temp = current_betas[seq_len(n)]
sim_temp
seq_len(n)
pos_conditional_vars
names(model$freq)
names(coef(model))
beta_names
length(beta_names)
lapply(choices, grepl, beta_names)
choices
beta_names
lapply(choices, grepl, beta_names)
length(beta_names)
n_multinomial
pos_conditional_vars
pos
pos = 7
current_betas[pos]
sim_temp = cbind(sim_temp, current_betas[pos])
sim_temp
pos_multinomial_vars
j = 7
current_betas[j + seq_len(n)
]
for(j in pos_multinomial_vars){
sim_temp = cbind(sim_temp, current_betas[j + seq_len(n)])
}
sim_temp
sim_temp %*% values
values
yhat = c(0, sim_temp %*% values)
e = exp(yhat)
for(j in seq_along(choices)){
pred[j, i] = e[j] / sum(e)
}
pred
sim_temp
summary(model1)
c(0, sim_temp %*% values)
exp(yhat)
e[j] / sum(e)
for(j in seq_along(choices)){
pred[j, i] = e[j] / sum(e)
}
pred
matrix(nrow = length(choices), ncol = sim.count)
View(pred)
df_selects = schlegel::selects2015
df_selects_withoutNA = df_selects |>
dplyr::filter(vote_choice != "other") |>
dplyr::mutate(vote_choice = factor(vote_choice)) |>
dplyr::select(age, gender, vote_choice, starts_with("lr_")) |>
na.omit()
mlogit_data = dfidx::dfidx(df_selects_withoutNA, varying = 5:11,
sep = "_", shape = "wide",
choice = "vote_choice")
mlogit_data$distance = abs(mlogit_data$lr - mlogit_data$lr_self)
model1 = mlogit::mlogit(vote_choice ~ distance | lr_self +
gender, data = mlogit_data)
model = model1
values = c(1, 2, 0, 0)
sim.count=1000
conf.int=0.95
sigma=NULL
set.seed=NULL
summary = TRUE
# check inputs
if(sum("mlogit" %in% class(model)) == 0){
stop("model has to be of type mlogit()")
}
choices = names(model$freq)
beta_names = names(coef(model))
n_multinomial = do.call(sum, lapply(choices, grepl, beta_names))
n_conditional = length(beta_names) - n_multinomial
if(length(values) != n_multinomial / (length(choices) - 1) + n_conditional){
stop("the length of values is not identical to the number of coefficient of the model")
}
if(!is.numeric(sim.count) | round(sim.count) != sim.count){
stop("sim.count has to be whole number")
}
if(!is.numeric(conf.int)){
stop("conf.int has to be numeric")
}
if(!is.null(set.seed) & !is.numeric(set.seed)){
stop("set.seed must be numeric")
}
type = match.arg(type)
if(type == "bootstrap"){
warning("Bootstrap not supported for mlogit. Using simulation instead.")
}
type = "simulation"
betas = coef(model)
if(is.null(sigma)){
sigma = vcov(model)
}
# simulation
betas_draw = MASS::mvrnorm(sim.count, betas, sigma)
pred = matrix(nrow = length(choices), ncol = sim.count)
i = 1
current_betas = betas_draw[i,]
n = length(choices) - 1
pos_conditional_vars = (n+1):(n+n_conditional)
pos_multinomial_vars = max(pos_conditional_vars) +
(seq_len((length(betas) - max(pos_conditional_vars)) / n) - 1) * n
sim_temp = current_betas[seq_len(n)]
for(pos in pos_conditional_vars){
sim_temp = cbind(sim_temp, current_betas[pos])
}
for(j in pos_multinomial_vars){
sim_temp = cbind(sim_temp, current_betas[j + seq_len(n)])
}
sim_temp
summary(model)
values = c(1, 2, 0, 0, 1, 2, 10, 0)
sim_temp
values
values = c(1, 2, 0, 0)
values = list(1, c(2, 5, 5, 5, 5, 5), 0, 0)
values
expand.grid(values)
c(0, sim_temp %*% expand.grid(values))
expand.grid(values)
class(expand.grid(values))
yhat = c(0, sim_temp %*% as.matrix(expand.grid(values)))
as.matrix(expand.grid(values))
sim_temp
c(0, sim_temp %*% t(as.matrix(expand.grid(values))))
t(as.matrix(expand.grid(values)))
sim_temp
sim_temp %*% t(as.matrix(expand.grid(values)))
t(as.matrix(expand.grid(values)))
c(0, diag(sim_temp %*% t(as.matrix(expand.grid(values)))))
basepredict.mlogit = function(model, values, sim.count=1000, conf.int=0.95, sigma=NULL, set.seed=NULL,
type = c("any", "simulation", "bootstrap"), summary = TRUE){
# check inputs
if(sum("mlogit" %in% class(model)) == 0){
stop("model has to be of type mlogit()")
}
choices = names(model$freq)
beta_names = names(coef(model))
n_multinomial = do.call(sum, lapply(choices, grepl, beta_names))
n_conditional = length(beta_names) - n_multinomial
if(length(values) != n_multinomial / (length(choices) - 1) + n_conditional){
stop("the length of values is not identical to the number of coefficient of the model")
}
if(!is.numeric(sim.count) | round(sim.count) != sim.count){
stop("sim.count has to be whole number")
}
if(!is.numeric(conf.int)){
stop("conf.int has to be numeric")
}
if(!is.null(set.seed) & !is.numeric(set.seed)){
stop("set.seed must be numeric")
}
for(v in values){
if(length(v) != length(choices)-1 & length(v) != 1){
stop("values need to be of length 1 or length of choices-1")
}
}
type = match.arg(type)
if(type == "bootstrap"){
warning("Bootstrap not supported for mlogit. Using simulation instead.")
}
type = "simulation"
betas = coef(model)
if(is.null(sigma)){
sigma = vcov(model)
}
# simulation
betas_draw = MASS::mvrnorm(sim.count, betas, sigma)
pred = matrix(nrow = length(choices), ncol = sim.count)
for(i in 1:sim.count){
current_betas = betas_draw[i,]
n = length(choices) - 1
pos_conditional_vars = (n+1):(n+n_conditional)
pos_multinomial_vars = max(pos_conditional_vars) +
(seq_len((length(betas) - max(pos_conditional_vars)) / n) - 1) * n
sim_temp = current_betas[seq_len(n)]
for(pos in pos_conditional_vars){
sim_temp = cbind(sim_temp, current_betas[pos])
}
for(j in pos_multinomial_vars){
sim_temp = cbind(sim_temp, current_betas[j + seq_len(n)])
}
yhat = c(0, diag(sim_temp %*% t(as.matrix(expand.grid(values)))))
e = exp(yhat)
for(j in seq_along(choices)){
pred[j, i] = e[j] / sum(e)
}
}
# return all simulated
if(!summary){
return(pred)
}
confint_lower = (1 - conf.int) / 2
result = matrix(nrow = n + 1, ncol = 3)
colnames(result) = c("mean",
paste0(100 * confint_lower, "%"),
paste0(100 * (1 - confint_lower), "%"))
rownames(result) = choices
for(j in 1:(n+1)){
result[j,] = c(mean(pred[j,]), quantile(pred[j,],probs = c(confint_lower, 1 - confint_lower)))
}
result
}
values
values[1:2]
devtools::install()
devtools::load_all()
model
basepredict(model1, list(1, c(1, 5, 5, 5, 5, 5), 0, 0))
basepredict(model1, list(1, c(2, 5, 5, 5, 5, 5), 0, 0))
basepredict(model1, list(1, c(9, 5, 5, 5, 5, 5), 0, 0))
basepredict(model1, list(1, c(10, 5, 5, 5, 5, 5), 0, 0))
basepredict(model1, list(1, c(3, 5, 5, 5, 5, 5), 0, 0))
basepredict(model1, list(1, c(3, 2, 2, 2, 2, 2), 0, 0))
basepredict(model1, list(1, c(3, 2, 2, 2, 2, 3), 0, 0))
basepredict(model1, list(1, c(3, 2, 2, 2, 2, 10), 0, 0))
dc(model1, list(1, c(2, 2, 2, 2, 2, 9), 0, 0, 1, c(2, 2, 2, 2, 2, 10), 0, 0))
grepl("|{1}","|")
grepl("|{1}","|d")
grepl("|.*|","||")
value = "5,5,|1,2,3|,5"
grepl("^(|?-?[0-9]+(\\.[0-9]+)?)|?(,|?-?[0-9]+(\\.[0-9]+)?)*|?$",value) &
grepl("|.*[0-9]+.*|",value)
value = "5,5,1,2,3,5"
grepl("^(|?-?[0-9]+(\\.[0-9]+)?)|?(,|?-?[0-9]+(\\.[0-9]+)?)*|?$",value) &
grepl("|.*[0-9]+.*|",value)
value = "log(5,5,1,2,3,59"
value = "log(5,5,1,2,3,5)"
grepl("^(|?-?[0-9]+(\\.[0-9]+)?)|?(,|?-?[0-9]+(\\.[0-9]+)?)*|?$",value) &
grepl("|.*[0-9]+.*|",value)
grepl("|.*[0-9]+.*|",value)
grepl("|{1}.*[0-9]+.*|",value)
grepl("|{1}.*[0-9]+.*|{1}",value)
grepl("\\|{1}.*[0-9]+.*|{1}",value)
grepl("\\|{1}.*[0-9]+.*\\|{1}",value)
value = "5,5,|1,2,3|,5"
grepl("\\|{1}.*[0-9]+.*\\|{1}",value)
current.values = as.numeric(unlist(strsplit(value,",")))
current.values
current.values = unlist(strsplit(value,","))
current.values
which(grepl("^\||",current.values))
which(grepl("^\\|",current.values))
end = which(grepl("\\|$",current.values))
end
start = which(grepl("^\\|",current.values))
end = which(grepl("\\|$",current.values))
current.values[-c(start,end)]
1:10[0]
current.values[start:end]
current.values[start:end] |> gsub("\\|","",.) |> as.numeric()
cond_values = gsub("\\|","",current.values[start:end]) |> as.numeric()
cond_values
current.values[-c((start+1):end)]
current.values = as.list(current.values)
current.values
current.values = unlist(strsplit(value,","))
start = which(grepl("^\\|",current.values))
end = which(grepl("\\|$",current.values))
cond_values = gsub("\\|","",current.values[start:end]) |> as.numeric()
if(length(cond_values) == 1){
current.values[start] = cond_values
}else{
current.values = current.values[-c((start+1):end)]
current.values = as.list(current.values)
}
current.values
current.values[start] = cond_values
current.values[[start]] = cond_values
current.values
as.list(as.numeric(current.values))
current.values = unlist(strsplit(value,","))
start = which(grepl("^\\|",current.values))
end = which(grepl("\\|$",current.values))
cond_values = gsub("\\|","",current.values[start:end]) |> as.numeric()
if(length(cond_values) == 1){
current.values[start] = cond_values
}else{
current.values = current.values[-c((start+1):end)]
current.values = as.list(as.numeric(current.values))
current.values[[start]] = cond_values
}
??ignorewarning
current.values = unlist(strsplit(value,","))
start = which(grepl("^\\|",current.values))
end = which(grepl("\\|$",current.values))
cond_values = gsub("\\|","",current.values[start:end]) |> as.numeric()
if(length(cond_values) == 1){
current.values[start] = cond_values
}else{
current.values = current.values[-c((start+1):end)]
current.values = as.list(suppressWarnings(as.numeric(current.values)))
current.values[[start]] = cond_values
}
current.values
values
value
value = "|4|,5,5,5,5,5,5"
current.values = unlist(strsplit(value,","))
start = which(grepl("^\\|",current.values))
end = which(grepl("\\|$",current.values))
cond_values = gsub("\\|","",current.values[start:end]) |> as.numeric()
if(length(cond_values) == 1){
current.values[start] = cond_values
}else{
current.values = current.values[-c((start+1):end)]
current.values = as.list(suppressWarnings(as.numeric(current.values)))
current.values[[start]] = cond_values
}
current.values
as.list(suppressWarnings(as.numeric(current.values)))
value = "|1,2,3,4,7,8,9,10|,5,5,5,5,5,5"
current.values = unlist(strsplit(value,","))
start = which(grepl("^\\|",current.values))
end = which(grepl("\\|$",current.values))
cond_values = gsub("\\|","",current.values[start:end]) |> as.numeric()
if(length(cond_values) == 1){
current.values[start] = cond_values
current.values = as.list(suppressWarnings(as.numeric(current.values)))
}else{
current.values = current.values[-c((start+1):end)]
current.values = as.list(suppressWarnings(as.numeric(current.values)))
current.values[[start]] = cond_values
}
current.values
value = "5,5,5,5,5,5,|1,2,3,4,7,8,9,10|"
current.values = unlist(strsplit(value,","))
start = which(grepl("^\\|",current.values))
end = which(grepl("\\|$",current.values))
cond_values = gsub("\\|","",current.values[start:end]) |> as.numeric()
if(length(cond_values) == 1){
current.values[start] = cond_values
current.values = as.list(suppressWarnings(as.numeric(current.values)))
}else{
current.values = current.values[-c((start+1):end)]
current.values = as.list(suppressWarnings(as.numeric(current.values)))
current.values[[start]] = cond_values
}
current.values
df_selects = haven::read_dta("2634_Selects2023_PES_Data_v1.0.dta")
