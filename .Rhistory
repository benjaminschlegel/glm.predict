}
print(i)
})
ISSP_list[c(1,2,3,4,6)] <- lapply(ISSP_list[c(1,2,3,4,6)], function (x){
x  <- x %>%
mutate(across(all_of(c("sscsex")), ~replace(., . %in% c("5", "Cant choose",
"na", "E: depends", "Can't choose",
"cant choose, dk", "No answer",
"na, refused",
"Can t choose","No Answer",
"8. Can't choose", "9. No answer; GE: Refused"), NA))) %>%
droplevels() %>%
mutate(sscsex = dplyr::recode(sscsex, "almost always wrong" = "Almost always wrong",
"sometim" = "Only sometimes wrong",
"not wrong" = "Not wrong at all"))
levels(x$sscsex) = gsub("[1-4]\\. ", "", levels(x$sscsex))
x
})
ISSP_list[[6]]$sscsex
tables <- lapply(ISSP_list, function (x){
if(is.null(x$sscsex)) {
i  <- sapply(x[,c("fbrgchld", "mbrgchld")], levels)
} else {
i  <- levels(x[,"sscsex"])
}
print(i)
})
changeSex = function(x, from, to){
levels(x)[grepl(from, levels(x), ignore.case = T)] <- to
}
changeSex = function(x, from, to, not = FALSE){
if(not){
levels(x)[!grepl(from, levels(x), ignore.case = T)] <- to
}else{
levels(x)[grepl(from, levels(x), ignore.case = T)] <- to
}
}
changeSex = function(x, from, to, not = FALSE){
if(not){
levels(x)[!grepl(from, levels(x), ignore.case = T)] <- to
}else{
levels(x)[grepl(from, levels(x), ignore.case = T)] <- to
}
}
ISSP_list[c(1,2,3,4,6)] <- lapply(ISSP_list[c(1,2,3,4,6)], function (x){
x  <- x %>%
mutate(across(all_of(c("sscsex")), ~replace(., . %in% c("5", "Cant choose",
"na", "E: depends", "Can't choose",
"cant choose, dk", "No answer",
"na, refused",
"Can t choose","No Answer",
"8. Can't choose", "9. No answer; GE: Refused"), NA))) %>%
droplevels()
changeSex(x$sscsex, "almost always wrong", "Almost always wrong")
changeSex(x$sscsex, "sometim", "Only sometimes wrong")
changeSex(x$sscsex, "not wrong", "Not wrong at all")
changeSex(x$sscsex, "almost always wrong|sometim|not wrong", "Always wrong", TRUE)
#levels(x$sscsex)[grepl("almost always wrong", levels(x$sscsex), ignore.case = T)] <- "Almost always wrong"
#levels(x$sscsex)[grepl("sometim",levels(x$sscsex), ignore.case = T)] <- "Only sometimes wrong"
#levels(x$sscsex)[grepl("not wrong",levels(x$sscsex), ignore.case = T)] <- "Not wrong at all"
#levels(x$sscsex)[!grepl("almost always wrong|sometim|not wrong", levels(x$sscsex), ignore.case = T)] <- "Always wrong"
x
})
ISSP_list <- read_rds("ISSP_list.rds")
tables <- lapply(ISSP_list, function (x){
if(is.null(x$sscsex)) {
i  <- sapply(x[,c("fbrgchld", "mbrgchld")], levels)
} else {
i  <- levels(x[,"sscsex"])
}
print(i)
}
)
changeSex = function(x, from, to, not = FALSE){
if(not){
levels(x)[!grepl(from, levels(x), ignore.case = T)] <- to
}else{
levels(x)[grepl(from, levels(x), ignore.case = T)] <- to
}
}
ISSP_list[c(1,2,3,4,6)] <- lapply(ISSP_list[c(1,2,3,4,6)], function (x){
x  <- x %>%
mutate(across(all_of(c("sscsex")), ~replace(., . %in% c("5", "Cant choose",
"na", "E: depends", "Can't choose",
"cant choose, dk", "No answer",
"na, refused",
"Can t choose","No Answer",
"8. Can't choose", "9. No answer; GE: Refused"), NA))) %>%
droplevels()
changeSex(x$sscsex, "almost always wrong", "Almost always wrong")
changeSex(x$sscsex, "sometim", "Only sometimes wrong")
changeSex(x$sscsex, "not wrong", "Not wrong at all")
changeSex(x$sscsex, "almost always wrong|sometim|not wrong", "Always wrong", TRUE)
#levels(x$sscsex)[grepl("almost always wrong", levels(x$sscsex), ignore.case = T)] <- "Almost always wrong"
#levels(x$sscsex)[grepl("sometim",levels(x$sscsex), ignore.case = T)] <- "Only sometimes wrong"
#levels(x$sscsex)[grepl("not wrong",levels(x$sscsex), ignore.case = T)] <- "Not wrong at all"
#levels(x$sscsex)[!grepl("almost always wrong|sometim|not wrong", levels(x$sscsex), ignore.case = T)] <- "Always wrong"
x
})
tables <- lapply(ISSP_list, function (x){
if(is.null(x$sscsex)) {
i  <- sapply(x[,c("fbrgchld", "mbrgchld")], levels)
} else {
i  <- levels(x[,"sscsex"])
}
print(i)
}
)
tables
tables <- lapply(ISSP_list, function (x){
if(is.null(x$sscsex)) {
i  <- sapply(x[,c("fbrgchld", "mbrgchld")], levels)
} else {
i  <- levels(x[,"sscsex"])
}
print(i)
}
)
changeSex = function(x, from, to, not = FALSE){
if(not){
levels(x)[!grepl(from, levels(x), ignore.case = T)] <- to
}else{
levels(x)[grepl(from, levels(x), ignore.case = T)] <- to
}
x
}
ISSP_list <- read_rds("ISSP_list.rds")
tables <- lapply(ISSP_list, function (x){
if(is.null(x$sscsex)) {
i  <- sapply(x[,c("fbrgchld", "mbrgchld")], levels)
} else {
i  <- levels(x[,"sscsex"])
}
print(i)
}
)
changeSex = function(x, from, to, not = FALSE){
if(not){
levels(x)[!grepl(from, levels(x), ignore.case = T)] <- to
}else{
levels(x)[grepl(from, levels(x), ignore.case = T)] <- to
}
x
}
ISSP_list[c(1,2,3,4,6)] <- lapply(ISSP_list[c(1,2,3,4,6)], function (x){
x  <- x %>%
mutate(across(all_of(c("sscsex")), ~replace(., . %in% c("5", "Cant choose",
"na", "E: depends", "Can't choose",
"cant choose, dk", "No answer",
"na, refused",
"Can t choose","No Answer",
"8. Can't choose", "9. No answer; GE: Refused"), NA))) %>%
droplevels()
x$sscsex = changeSex(x$sscsex, "almost always wrong", "Almost always wrong")
x$sscsex = changeSex(x$sscsex, "sometim", "Only sometimes wrong")
x$sscsex = changeSex(x$sscsex, "not wrong", "Not wrong at all")
x$sscsex = changeSex(x$sscsex, "almost always wrong|sometim|not wrong", "Always wrong", TRUE)
#levels(x$sscsex)[grepl("almost always wrong", levels(x$sscsex), ignore.case = T)] <- "Almost always wrong"
#levels(x$sscsex)[grepl("sometim",levels(x$sscsex), ignore.case = T)] <- "Only sometimes wrong"
#levels(x$sscsex)[grepl("not wrong",levels(x$sscsex), ignore.case = T)] <- "Not wrong at all"
#levels(x$sscsex)[!grepl("almost always wrong|sometim|not wrong", levels(x$sscsex), ignore.case = T)] <- "Always wrong"
x
})
tables <- lapply(ISSP_list, function (x){
if(is.null(x$sscsex)) {
i  <- sapply(x[,c("fbrgchld", "mbrgchld")], levels)
} else {
i  <- levels(x[,"sscsex"])
}
print(i)
}
)
changeSex = function(x, from, to, not = FALSE){
levels(x)[xor(not, grepl(from, levels(x), ignore.case = T))] <- to
x
}
ISSP_list <- read_rds("ISSP_list.rds")
tables <- lapply(ISSP_list, function (x){
if(is.null(x$sscsex)) {
i  <- sapply(x[,c("fbrgchld", "mbrgchld")], levels)
} else {
i  <- levels(x[,"sscsex"])
}
print(i)
}
)
changeSex = function(x, from, to, not = FALSE){
levels(x)[xor(not, grepl(from, levels(x), ignore.case = T))] <- to
x
}
ISSP_list[c(1,2,3,4,6)] <- lapply(ISSP_list[c(1,2,3,4,6)], function (x){
x  <- x %>%
mutate(across(all_of(c("sscsex")), ~replace(., . %in% c("5", "Cant choose",
"na", "E: depends", "Can't choose",
"cant choose, dk", "No answer",
"na, refused",
"Can t choose","No Answer",
"8. Can't choose", "9. No answer; GE: Refused"), NA))) %>%
droplevels()
x$sscsex = changeSex(x$sscsex, "almost always wrong", "Almost always wrong")
x$sscsex = changeSex(x$sscsex, "sometim", "Only sometimes wrong")
x$sscsex = changeSex(x$sscsex, "not wrong", "Not wrong at all")
x$sscsex = changeSex(x$sscsex, "almost always wrong|sometim|not wrong", "Always wrong", TRUE)
x
})
changeSex = function(x, from, to, not = FALSE){
levels(x)[xor(not, grepl(from, levels(x), ignore.case = T))] <- to
x
}
tables <- lapply(ISSP_list, function (x){
if(is.null(x$sscsex)) {
i  <- sapply(x[,c("fbrgchld", "mbrgchld")], levels)
} else {
i  <- levels(x[,"sscsex"])
}
print(i)
}
)
library(R6)
library(ggplot2)
tetris_factory = R6Class(
"Tetris",
private = list(
..field = as.data.frame(cbind(..value = 0, ..row = sort(rep(1:18, 10)), ..col = rep(1:10, 18))),
..time = Sys.time(),
..draw_field = function(){
plot = ggplot(as.data.frame(subset(private$..field, private$..field$..row <= 15))) +
geom_rect(aes(xmax = ..col, xmin = ..col - 1, ymax = ..row, ymin = ..row - 1, fill = as.factor(..value)),
col = "grey") +
theme(legend.position = "none", axis.ticks = element_blank(), axis.text = element_blank(), panel.background = element_blank()) +
scale_fill_manual(values = c("grey80", "red", "blue", "green4", "purple3", "orange")) +
ylim(0, 15)
print(plot)
},
..set_block = function(row, col, value){
private$..field[private$..field$..row == row & private$..field$..col == col, "..value"] = value
},
..current_element = list(c(0,0),c(0,0),c(0,0),c(0,0)),
..order_element = function(){
temp = matrix(unlist(private$..current_element), byrow =T, ncol = 2)
temp = temp[order(temp[,1]),]
private$..current_element = list(temp[1,], temp[2,], temp[3,], temp[4,])
},
..new_element = function(){
choice = sample(1:5, 1)
if(choice == 1){
private$..set_block(16, 4, 1)
private$..set_block(16, 5, 1)
private$..set_block(16, 6, 1)
private$..set_block(16, 7, 1)
private$..current_element = list(c(16,4), c(16,5), c(16,6), c(16,7))
}else if(choice == 2){
private$..set_block(16, 4, 2)
private$..set_block(16, 5, 2)
private$..set_block(17, 5, 2)
private$..set_block(17, 6, 2)
private$..current_element = list(c(16,4), c(16,5), c(17,5), c(17,6))
}else if(choice == 3){
private$..set_block(17, 4, 3)
private$..set_block(17, 5, 3)
private$..set_block(16, 5, 3)
private$..set_block(16, 6, 3)
private$..current_element = list(c(17,4), c(17,5), c(16,5), c(16,6))
}else if(choice == 4){
private$..set_block(16, 4, 4)
private$..set_block(17, 5, 4)
private$..set_block(16, 5, 4)
private$..set_block(16, 6, 4)
private$..current_element = list(c(16,4), c(17,5), c(16,5), c(16,6))
}else{
private$..set_block(17, 6, 5)
private$..set_block(17, 5, 5)
private$..set_block(16, 5, 5)
private$..set_block(16, 6, 5)
private$..current_element = list(c(17,6), c(17,5), c(16,5), c(16,6))
}
},
..drop = function(){
moved = FALSE
cannot_move = 4
private$..order_element()
for(tupple in private$..current_element){ # tupple r: [1], c: [2]
r = (tupple[1]-1) * 10 + tupple[2] - 10
if(r > 0 && private$..field[r, "..value"] == 0){
cannot_move = cannot_move - 1
}else if(sum(sum(private$..current_element[[1]] == (tupple - c(1,0)))==2,
sum(private$..current_element[[2]] == (tupple - c(1,0)))==2,
sum(private$..current_element[[3]] == (tupple - c(1,0)))==2,
sum(private$..current_element[[4]] == (tupple - c(1,0)))==2)>0){
cannot_move = cannot_move - 1
}
}
if(cannot_move == 0){
moved = TRUE
for(tupple in private$..current_element){ # tupple r: [1], c: [2]
r = (tupple[1]-1) * 10 + tupple[2]
private$..field[r - 10, "..value"] = private$..field[r, "..value"]
private$..field[r, "..value"] = 0
}
private$..current_element[[1]][1] = private$..current_element[[1]][1] - 1
private$..current_element[[2]][1] = private$..current_element[[2]][1] - 1
private$..current_element[[3]][1] = private$..current_element[[3]][1] - 1
private$..current_element[[4]][1] = private$..current_element[[4]][1] - 1
}
private$..draw_field()
moved
},
..keydown = function(key){
if(key == "Up"){
message("Turn around!")
}
if(key == "Right"){
message("Turn right!")
}
if(key == "Left"){
message("Turn left!")
}
},
..onIdle = function(){
message("waiting")
}
),
public = list(
initialize = function(){
x11()
private$..draw_field()
self$play()
},
play = function(){
private$..new_element()
while(T){
#setGraphicsEventHandlers(promt = "Tetris", onKeybd = private$..keydown, onIdle = private$..onIdle)
#eventEnv <- getGraphicsEventEnv()
#getGraphicsEvent()
if(Sys.time() - 1 > private$..time){
private$..time = Sys.time()
if(!private$..drop()){
if(sum(private$..field[161:180,"..value"])>0){
message("Game over!")
return()
}
break
}
}
}
self$play()
}
),
active = list(
field = function(){
private$..field
}
)
)
tetris = tetris_factory$new()
glm.predict::dc.polr
df = glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"18-80;F;mode")
View(df)
df = glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"18-80;F;mode", position = 2)
View(df)
df = glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"18-80;F;F", position = 2)
View(df)
ggplot(df, aes(x = age, y = dc_mean, ymin = dc_lower, ymax = dc_upper)) + facet_wrap(~opinion_eu_membership) + theme_bw() + geom_linerange()
ggplot(df, aes(x = age, y = dc_mean, ymin = dc_lower, ymax = dc_upper)) + facet_wrap(~opinion_eu_membership) + theme_bw() + geom_linerange() + geom_line()
ggplot(df, aes(x = age, y = dc_mean, ymin = dc_lower, ymax = dc_upper)) + facet_wrap(~opinion_eu_membership) + theme_bw() + geom_ribbon(fill="steelblue") + geom_line(col="red")
ggplot(df, aes(x = age, y = dc_mean, ymin = dc_lower, ymax = dc_upper)) + facet_wrap(~opinion_eu_membership) + theme_bw() + geom_ribbon(fill="steelblue") + geom_line(col="red", size=4)
ggplot(df, aes(x = age, y = dc_mean, ymin = dc_lower, ymax = dc_upper)) + facet_wrap(~opinion_eu_membership) + theme_bw() + geom_ribbon(fill="steelblue") + geom_line(col="red", size=1)
ggplot(df, aes(x = age, y = dc_mean, ymin = dc_lower, ymax = dc_upper)) + facet_wrap(~opinion_eu_membership) + theme_bw() + geom_ribbon(fill="steelblue") + geom_line(col="black", size=1)
df = glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q4;mode;mode")
df = glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q4;mode;mode", doPar = FALSE)
df = glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q4;mode;mode", doPar = FALSE)
df = glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q4;mode;mode", doPar = TRUE)
df = glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q4;mode;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q4;mode;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q5;mode;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q10;mode;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q100;mode;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q1;mode;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"Q0;mode;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"max;mode;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"min;mode;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"mean;mode;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"mean;F;mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"mean;F(1);mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"mean;F(2);mode", doPar = FALSE)
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"mean;F(2);mode", doPar = FALSE, type = "bootstrap")
glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"mean;F(2);mode", doPar = FALSE, type = "simulation")
basepredict.lm
glm.predict::basepredict.lm
df = glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"18-80;F;F", position = 2, sim.count = 100000)
df = glm.predict::predicts(lm(lr_self ~ age * gender + opinion_eu_membership, data = glm.predict::selects2015),
"18-80;F;F", position = 2, sim.count = 100000, doPar = FALSE)
ggplot(df, aes(x = age, y = dc_mean, ymin = dc_lower, ymax = dc_upper)) + facet_wrap(~opinion_eu_membership) + theme_bw() + geom_ribbon(fill="steelblue") + geom_line(col="black", size=1)
brant::brant(MASS::polr(opinion_eu_membership ~ age + gender + opinion_foreigners_swiss_equal, data = schlegel::selects2015, Hess=TRUE), by.var = TRUE)
brant::brant(MASS::polr(opinion_eu_membership ~ age + gender, data = schlegel::selects2015, Hess=TRUE), by.var = TRUE)
brant::brant(MASS::polr(opinion_eu_membership ~ age + gender + education, data = schlegel::selects2015, Hess=TRUE), by.var = TRUE)
library(brant)
library(schlegel)
library(MASS)
brant(polr(opinion_eu_membership ~ age + gender + education, data = schlegel::selects2015), by.var = TRUE)
brant(polr(opinion_eu_membership ~ age + gender + education, data = selects2015), by.var = TRUE)
library/vgam
library(VGAM)
vgam(opinion_eu_membership ~ age + gender + education, data = selects2015, family = cummulative(parallel ?= FALSE ~ age))
vgam(opinion_eu_membership ~ age + gender + education, data = selects2015, family = cummulative(parallel = FALSE ~ age))
vgam(opinion_eu_membership ~ age + gender + education, data = selects2015, family = cumulative(parallel = FALSE ~ age))
vgam(ordered(opinion_eu_membership) ~ age + gender + education, data = selects2015, family = cumulative(parallel = FALSE ~ age))
summary(vgam(ordered(opinion_eu_membership) ~ age + gender + education, data = selects2015, family = cumulative(parallel = FALSE ~ age)))
summary(vglm(ordered(opinion_eu_membership) ~ age + gender + education, data = selects2015, family = cumulative(parallel = FALSE ~ age)))
devtools::create_package("C:\\Users\\benja\\OneDrive - Universität Zürich UZH\\01_UZH\\02_teaching\\2022_02_R_Programing_Skills\\Week 10\\regexcite")
install.packages("pkgload")
install.packages("pkgload")
devtools::create_package("C:\\Users\\benja\\OneDrive - Universität Zürich UZH\\01_UZH\\02_teaching\\2022_02_R_Programing_Skills\\Week 10\\regexcite")
install.packages("pkgload")
install.packages("pkgload")
devtools::create_package("C:\\Users\\benja\\OneDrive - Universität Zürich UZH\\01_UZH\\02_teaching\\2022_02_R_Programing_Skills\\Week 10\\regexcite")
library(devtools)
create_package("C:\\Users\\benja\\OneDrive - Universität Zürich UZH\\01_UZH\\02_teaching\\2022_02_R_Programing_Skills\\Week 10\\regexcite")
devtools::install_github("benjaminschlegel/glm.predict")
library(glm.predict)
model_glm = glm(participation ~ gender + age + opinion_eu_membership, data = selects2015,
family = "binomial")
predicts(model_glm, "2;mean;median")
predicts(model_glm, "2;mean;2")
predicts(model_glm, "mode;mean;median")
predicts(model_glm, "mode;mean;1")
devtools::install_github("benjaminschlegel/glm.predict")
predicts(model_glm, "mode;mean;1")
glm.predict::predicts(model_glm, "mode;mean;1")
model_glm = glm(participation ~ gender + age + opinion_eu_membership, data = selects2015,
family = "binomial")
glm.predict::predicts(model_glm, "mode;mean;1")
model_glm = glm(participation ~ gender + age + opinion_eu_membership, data = schlegel::selects2015,
family = "binomial")
glm.predict::predicts(model_glm, "mode;mean;1")
devtools::install_github("benjaminschlegel/glm.predict")
model_glm = glm(participation ~ gender + age + opinion_eu_membership, data = schlegel::selects2015,
family = "binomial")
glm.predict::predicts(model_glm, "mode;mean;1")
glm.predict::predicts(model_glm, "mode;mean;1-3")
glm.predict::predicts(model_glm, "mode;mean;1,3")
devtools::install_github("benjaminschlegel/glm.predict")
model_glm = glm(participation ~ gender + age + opinion_eu_membership, data = schlegel::selects2015,
family = "binomial")
glm.predict::predicts(model_glm, "mode;mean;1-3")
glm.predict::predicts(model_glm, "mode;mean;1,3")
glm.predict:::getValues
devtools::install_github("benjaminschlegel/glm.predict")
devtools::install_github("benjaminschlegel/glm.predict", force = TRUE)
?glm.predict
model_glm = glm(participation ~ gender + age + opinion_eu_membership, data = schlegel::selects2015,
family = "binomial")
glm.predict::predicts(model_glm, "mode;mean;1,3")
glm.predict::predicts(model_glm, "mode;mean;1-3")
glm.predict::predicts(model_glm, "mode;mean;median")
devtools::install_github("benjaminschlegel/glm.predict")
?glm.predict
model_glm = glm(participation ~ gender + age + opinion_eu_membership, data = schlegel::selects2015,
family = "binomial")
glm.predict::predicts(model_glm, "mode;mean;median")
glm.predict::predicts(model_glm, "mode;mean;mode")
glm.predict::predicts(model_glm, "mode;mean;mean")
glm.predict::predicts(model_glm, "mode;mean;median")
?glm.predict::predicts
glm.predict::predicts(model_glm, "mode;mean;all")
glm.predict::predicts(model_glm, "mode;all;all")
sort(3:§1)
sort(3:1)
devtools::install_github("benjaminschlegel/glm.predict")
glm.predict::predicts(model_glm, "mode;all;all")
model_glm = glm(participation ~ gender + age + opinion_eu_membership, data = schlegel::selects2015,
family = "binomial")
glm.predict::predicts(model_glm, "mode;all;all")
model_glm = glm(participation ~ gender + age + opinion_eu_membership, data = schlegel::selects2015,
family = "binomial")
glm.predict::predicts(model_glm, "mode;all;all")
getwd()
setwd("Github")
getwd()
devtools::submit_cran(pkg = "glm.predict")
devtools::check(package="glm.predict")
devtools::check()
devtools::check(pgk="glm.predict")
setwd("glm.predict")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::submit_cran()
