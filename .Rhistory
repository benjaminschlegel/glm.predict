values.list
is.factor
products = getProducts(value, position)
products = glm.predict:::getProducts(value, position)
products
# initialize variables
n = length(values.list)
n
rows = products[length(products)]
rows
cnames = colnames(matrix)
cnames
value.names = grep("^[^(][^:\\^]*$",cnames, value = T)
value.names
base.combinations = matrix(NA, nrow = rows, ncol = length(value.names))
base.combinations
colnames(base.combinations) = value.names
base.combinations
for(r in 1:rows){
if(is.null(position)){
data.frame.position = length(result) - n + 1
}else{
data.frame.position = length(result) - n
}
c = 1
for(i in 1:n){
current.product = products[i]
current.values = values.list[[i]]
if(i == 1){
preproduct = 1
}else{
preproduct = products[i-1]
}
v1 = floor((r - 1) %% current.product / preproduct) + 1
if(!is.null(position) && i == position && is.factor[i]){
combinations = getFactorCombinations(length(current.values[,1]))
f.v1 = combinations[v1,1]
f.v2 = combinations[v1,2]
base.combinations_1[r,c:(c + length(current.values[f.v1,]) - 1)] = current.values[f.v1,]
base.combinations_2[r,c:(c + length(current.values[f.v1,]) - 1)] = current.values[f.v2,]
# labels
label_pos1 = which(current.values[f.v1,]==1)
label_pos2 = which(current.values[f.v2,]==1)
label_pos1 = ifelse(length(label_pos1) == 0, 1, label_pos1 + 1)
label_pos2 = ifelse(length(label_pos2) == 0, 1, label_pos2 + 1)
result[r, data.frame.position] = getLabel(data, i, label_pos1)
result[r, data.frame.position + 1] = getLabel(data, i, label_pos2)
data.frame.position = data.frame.position + 2
c = c + length(current.values[f.v1,])
}else if(!is.null(position) && i == position){
v2 = v1 + 1
base.combinations_1[r,c:(c + length(current.values[v1]) - 1)] = current.values[v1]
base.combinations_2[r,c:(c + length(current.values[v1]) - 1)] = current.values[v2]
# labels
result[r,data.frame.position] = current.values[v1]
result[r,data.frame.position+1] = current.values[v2]
data.frame.position = data.frame.position + 2
c = c + length(current.values[v1])
}else if(is.factor[i]){
if(is.null(position)){
base.combinations[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
}else{
base.combinations_1[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
base.combinations_2[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
}
c = c + length(current.values[v1,])
# labels
pos = 1
for(p in 1:length(current.values[v1,])){
if(current.values[v1,][p]==1){
pos = p + 1
}
}
result[r, data.frame.position] = getLabel(data,i,pos)
data.frame.position = data.frame.position + 1
}else{
if(is.null(position)){
base.combinations[r, c] = current.values[v1]
}else{
base.combinations_1[r, c] = current.values[v1]
base.combinations_2[r, c] = current.values[v1]
}
# labels
if(data.frame.position %in% log.pos){
result[r, data.frame.position] = exp(current.values[v1])
}else{
result[r, data.frame.position] = current.values[v1]
}
data.frame.position = data.frame.position + 1
c = c + 1
}
}
}
rows
r = 1
is.null(position)
data.frame.position = length(result) - n + 1
data.frame.position
c = 1
for(i in 1:n){
current.product = products[i]
current.values = values.list[[i]]
if(i == 1){
preproduct = 1
}else{
preproduct = products[i-1]
}
v1 = floor((r - 1) %% current.product / preproduct) + 1
if(!is.null(position) && i == position && is.factor[i]){
combinations = getFactorCombinations(length(current.values[,1]))
f.v1 = combinations[v1,1]
f.v2 = combinations[v1,2]
base.combinations_1[r,c:(c + length(current.values[f.v1,]) - 1)] = current.values[f.v1,]
base.combinations_2[r,c:(c + length(current.values[f.v1,]) - 1)] = current.values[f.v2,]
# labels
label_pos1 = which(current.values[f.v1,]==1)
label_pos2 = which(current.values[f.v2,]==1)
label_pos1 = ifelse(length(label_pos1) == 0, 1, label_pos1 + 1)
label_pos2 = ifelse(length(label_pos2) == 0, 1, label_pos2 + 1)
result[r, data.frame.position] = getLabel(data, i, label_pos1)
result[r, data.frame.position + 1] = getLabel(data, i, label_pos2)
data.frame.position = data.frame.position + 2
c = c + length(current.values[f.v1,])
}else if(!is.null(position) && i == position){
v2 = v1 + 1
base.combinations_1[r,c:(c + length(current.values[v1]) - 1)] = current.values[v1]
base.combinations_2[r,c:(c + length(current.values[v1]) - 1)] = current.values[v2]
# labels
result[r,data.frame.position] = current.values[v1]
result[r,data.frame.position+1] = current.values[v2]
data.frame.position = data.frame.position + 2
c = c + length(current.values[v1])
}else if(is.factor[i]){
if(is.null(position)){
base.combinations[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
}else{
base.combinations_1[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
base.combinations_2[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
}
c = c + length(current.values[v1,])
# labels
pos = 1
for(p in 1:length(current.values[v1,])){
if(current.values[v1,][p]==1){
pos = p + 1
}
}
result[r, data.frame.position] = getLabel(data,i,pos)
data.frame.position = data.frame.position + 1
}else{
if(is.null(position)){
base.combinations[r, c] = current.values[v1]
}else{
base.combinations_1[r, c] = current.values[v1]
base.combinations_2[r, c] = current.values[v1]
}
# labels
if(data.frame.position %in% log.pos){
result[r, data.frame.position] = exp(current.values[v1])
}else{
result[r, data.frame.position] = current.values[v1]
}
data.frame.position = data.frame.position + 1
c = c + 1
}
}
1:n
i = 1
current.product = products[i]
current.values = values.list[[i]]
current.product
current.values
i == 1
if(i == 1){
preproduct = 1
}else{
preproduct = products[i-1]
}
v1 = floor((r - 1) %% current.product / preproduct) + 1
v1
!is.null(position) && i == position && is.factor[i]
!is.null(position) && i == position
is.factor[i]
is.null(position)
base.combinations[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
base.combinations
v1
current.values
current.values[v1,]
base.combinations[r,c:(c + length(current.values[v1,]) - 1)]
current.values[v1,]
c:(c + length(current.values[v1,]) - 1)
base.combinations
c = 1
i
current.product = products[i]
current.values = values.list[[i]]
if(i == 1){
preproduct = 1
}else{
preproduct = products[i-1]
}
v1 = floor((r - 1) %% current.product / preproduct) + 1
if(!is.null(position) && i == position && is.factor[i]){
combinations = getFactorCombinations(length(current.values[,1]))
f.v1 = combinations[v1,1]
f.v2 = combinations[v1,2]
base.combinations_1[r,c:(c + length(current.values[f.v1,]) - 1)] = current.values[f.v1,]
base.combinations_2[r,c:(c + length(current.values[f.v1,]) - 1)] = current.values[f.v2,]
# labels
label_pos1 = which(current.values[f.v1,]==1)
label_pos2 = which(current.values[f.v2,]==1)
label_pos1 = ifelse(length(label_pos1) == 0, 1, label_pos1 + 1)
label_pos2 = ifelse(length(label_pos2) == 0, 1, label_pos2 + 1)
result[r, data.frame.position] = getLabel(data, i, label_pos1)
result[r, data.frame.position + 1] = getLabel(data, i, label_pos2)
data.frame.position = data.frame.position + 2
c = c + length(current.values[f.v1,])
}else if(!is.null(position) && i == position){
v2 = v1 + 1
base.combinations_1[r,c:(c + length(current.values[v1]) - 1)] = current.values[v1]
base.combinations_2[r,c:(c + length(current.values[v1]) - 1)] = current.values[v2]
# labels
result[r,data.frame.position] = current.values[v1]
result[r,data.frame.position+1] = current.values[v2]
data.frame.position = data.frame.position + 2
c = c + length(current.values[v1])
}else if(is.factor[i]){
if(is.null(position)){
base.combinations[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
}else{
base.combinations_1[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
base.combinations_2[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
}
c = c + length(current.values[v1,])
# labels
pos = 1
for(p in 1:length(current.values[v1,])){
if(current.values[v1,][p]==1){
pos = p + 1
}
}
result[r, data.frame.position] = getLabel(data,i,pos)
data.frame.position = data.frame.position + 1
}else{
if(is.null(position)){
base.combinations[r, c] = current.values[v1]
}else{
base.combinations_1[r, c] = current.values[v1]
base.combinations_2[r, c] = current.values[v1]
}
# labels
if(data.frame.position %in% log.pos){
result[r, data.frame.position] = exp(current.values[v1])
}else{
result[r, data.frame.position] = current.values[v1]
}
data.frame.position = data.frame.position + 1
c = c + 1
}
c
c = 1
is.factor[i]
is.null(position)
base.combinations[r,c:(c + length(current.values[v1,]) - 1)] = current.values[v1,]
base.combinations
c = c + length(current.values[v1,])
c
# labels
pos = 1
for(p in 1:length(current.values[v1,])){
if(current.values[v1,][p]==1){
pos = p + 1
}
}
p
pos
result[r, data.frame.position] = glm.predict:::getLabel(data,i,pos)
glm.predict:::getLabel(data,i,pos)
result[r, data.frame.position]
data.frame.position = data.frame.position + 1
temp = glm.predict:::getBaseCombinations(full_data, matrix, values, model, dv_levels, position)
if(!is.character(values)){
stop("values must be given as character!")
}
if("vglm" %in% class(model)){
full_data = VGAM::model.frame(model)
}else{
full_data =  stats::model.frame(model)
}
if(any(c("lmerMod", "glmerMod") %in% class(model))){
full_data = full_data[,-which(colnames(full_data) %in% names(ranef(model)))]
}
# collapse values to one character, if given as vector
if(length(values) > 1){
values = paste(values, collapse = ";")
}
if("tobit" %in% class(model)){
colnames(full_data)[1] = "y"
}
# reshape mlogit data
if("dfidx" %in% class(full_data)){
choices = levels(full_data$idx[[2]])
full_data = as.data.frame(full_data)
pos_idx = which(colnames(full_data) == "idx")
full_data = full_data[, -(pos_idx:ncol(full_data))]
full_data[,1] = as.factor(choices)
}
# remove weights column
if("(weights)" %in% colnames(full_data)){
full_data = full_data[,-which(colnames(full_data) == "(weights)")]
}
# remove polynomial values
full_data = full_data[, grep("^[^(][^:\\^]*$", colnames(full_data), value = TRUE)]
if(length(unlist(strsplit(values, ";"))) != ncol(full_data) - 1){
stop("The length of values does not match the number of independend variables.")
}
if(!is.null(position) && (!is.numeric(position) || position != round(position))){
stop("position must be a whole number or NULL.")
}
if(inherits(model, "multinom") && doPar){
doPar = FALSE
warning("Parallel version not supported for multinom() models. Setting doPar to FALSE.")
}
type = match.arg(type)
type = "simulation"
# remove any empty space in values
values = gsub("\\s","",values)
# get data
if(inherits(model,"polr") || inherits(model,"multinom") || inherits(model, "mlogit")){
if(!is.null(levels(full_data[,1]))){
dv_levels = levels(full_data[,1])
}else{
dv_levels = levels(as.factor(full_data[, 1]))
}
}else if(inherits(model,"vglm")){
dv_levels = model@extra$colnames.y
}else{
dv_levels = NULL
}
# data = full_data[,-1]  # data without y
matrix = stats::model.matrix(model)
# get base combinations
char_pos = which(sapply(full_data, is.character))
for(i in char_pos){
full_data[,i] = as.factor(full_data[,i])
}
temp = glm.predict:::getBaseCombinations(full_data, matrix, values, model, dv_levels, position)
temp
result = temp[["result"]]
if(is.null(position)){
base.combinations = temp[["base.combinations"]]
}else{
base.combinations_1 = temp[["base.combinations_1"]]
base.combinations_2 = temp[["base.combinations_2"]]
}
base.combinations
combinations = glm.predict:::getCombinations(matrix, base.combinations, model, dv_levels)
combinations
model = glm(participation ~ age * gender, data =schlegel::selects2015)
glm.predict::predicts(model, "18;0")
glm.predict::predicts(model, "18;1")
library(devtools)
install()
devtools::load_all()
predicts(model, "18;0")
devtools::load_all()
predicts(model, "18;0")
predicts(model, "18:10")
predicts(model, "18:20,1")
predicts(model, "18:20;1")
df = frame.frame(x = 1:10, `(weights)` = 1:10)
df = data.frame(x = 1:10, `(weights)` = 1:10)
df
colnames(df) = c("x", "(weights)")
df
"(weights)" %in% colnames(df)
"(weights)" %in% colnames(df)[1]
devtools::load_all()
m_lm = lm(lr_self ~ gender + age, data = selects2015, weights = weight_total)
m_lm
predicts(m_lm, "1;18", type = "bootstrap")
predicts(m_lm, "0;18", type = "bootstrap")
install()
devtools::install()
df_selects = schlegel::selects2015
df_selects_withoutNA = df_selects %>%
filter(vote_choice != "other") %>%
mutate(vote_choice = factor(vote_choice)) %>%
select(age, gender, vote_choice, starts_with("lr_")) %>%
na.omit()
df_selects = schlegel::selects2015
df_selects_withoutNA = df_selects |>
filter(vote_choice != "other") |>
mutate(vote_choice = factor(vote_choice)) |>
select(age, gender, vote_choice, starts_with("lr_")) |>
na.omit()
df_selects = schlegel::selects2015
df_selects_withoutNA = df_selects |>
dplyr::filter(vote_choice != "other") |>
dplyr::mutate(vote_choice = factor(vote_choice)) |>
dplyr::select(age, gender, vote_choice, starts_with("lr_")) |>
na.omit()
mlogit_data = dfidx::dfidx(df_selects_withoutNA, varying = 5:11,
sep = "_", shape = "wide",
choice = "vote_choice")
mlogit_data$distance = abs(mlogit_data$lr - mlogit_data$lr_self)
model1 = mlogit::mlogit(vote_choice ~ distance | lr_self +
gender, data = mlogit_data)
summary(model1)
model = model1
values = c(1, 2, 0, 0)
# check inputs
if(sum("mlogit" %in% class(model)) == 0){
stop("model has to be of type mlogit()")
}
choices = names(model$freq)
sim.count=1000
conf.int=0.95
sigma=NULL
set.seed=NULL
type = "any"
summary = TRUE
choices = names(model$freq)
beta_names = names(coef(model))
n_multinomial = do.call(sum, lapply(choices, grepl, beta_names))
n_conditional = length(beta_names) - n_multinomial
if(length(values) != n_multinomial / (length(choices) - 1) + n_conditional){
stop("the length of values is not identical to the number of coefficient of the model")
}
if(!is.numeric(sim.count) | round(sim.count) != sim.count){
stop("sim.count has to be whole number")
}
if(!is.numeric(conf.int)){
stop("conf.int has to be numeric")
}
if(!is.null(set.seed) & !is.numeric(set.seed)){
stop("set.seed must be numeric")
}
if(type == "bootstrap"){
warning("Bootstrap not supported for mlogit. Using simulation instead.")
}
type = "simulation"
betas = coef(model)
if(is.null(sigma)){
sigma = vcov(model)
}
# simulation
betas_draw = MASS::mvrnorm(sim.count, betas, sigma)
betas_draw
pred = matrix(nrow = length(choices), ncol = sim.count)
pred
i = 1
current_betas = betas_draw[i,]
current_betas
length(choices) - 1
n = length(choices) - 1
n
pos_conditional_vars = (n+1):(n+n_conditional)
pos_conditional_vars
pos_multinomial_vars = max(pos_conditional_vars) +
(seq_len((length(betas) - max(pos_conditional_vars)) / n) - 1) * n
pos_multinomial_vars
n_conditional
model1
sim_temp = current_betas[seq_len(n)]
sim_temp
seq_len(n)
pos_conditional_vars
names(model$freq)
names(coef(model))
beta_names
length(beta_names)
lapply(choices, grepl, beta_names)
choices
beta_names
lapply(choices, grepl, beta_names)
length(beta_names)
n_multinomial
pos_conditional_vars
pos
pos = 7
current_betas[pos]
sim_temp = cbind(sim_temp, current_betas[pos])
sim_temp
pos_multinomial_vars
j = 7
current_betas[j + seq_len(n)
]
for(j in pos_multinomial_vars){
sim_temp = cbind(sim_temp, current_betas[j + seq_len(n)])
}
sim_temp
sim_temp %*% values
values
yhat = c(0, sim_temp %*% values)
e = exp(yhat)
for(j in seq_along(choices)){
pred[j, i] = e[j] / sum(e)
}
pred
sim_temp
summary(model1)
c(0, sim_temp %*% values)
exp(yhat)
e[j] / sum(e)
for(j in seq_along(choices)){
pred[j, i] = e[j] / sum(e)
}
pred
matrix(nrow = length(choices), ncol = sim.count)
View(pred)
