fill = "brown")
n_kugeln = 1000
farben = c("red", "#C0C0C0", "blue")
df_kugeln = data.frame(
x = vector(mode = "numeric", length = n_kugeln),
y = vector(mode = "numeric", length = n_kugeln),
farbe = vector(mode = "character", length = n_kugeln)
)
set.seed(24122023)
for(i in 1:n_kugeln){
df_kugeln$farbe[i] = sample(farben, 1)
df_kugeln$y[i] = abs(rnorm(1, sd = max_i / 2))
df_kugeln$y[i] = ifelse(df_kugeln$y[i] < 0.5, 0.5, df_kugeln$y[i])
df_kugeln$y[i] = ifelse(df_kugeln$y[i] > max_i - 2, max_i - 2, df_kugeln$y[i])
df_kugeln$x[i] = runif(1, min = max_i * (0.5 - (max_i - df_kugeln$y[i])/max_i*0.25),
max = max_i * (0.5 + (max_i - df_kugeln$y[i])/max_i*0.25))
}
xmas = xmas + geom_point(data = df_kugeln, aes(x, y, color = farbe), size = 8) +
scale_color_manual(values = farben)
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i - .5, max_i - .5, max_i + .5),
fill = "gold")
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i + 0.2, max_i + 0.2, max_i - 0.8),
fill = "gold")
xmas = xmas + geom_rect(aes(xmin = max_i*0.25, xmax = max_i*0.40,
ymax = -0.5, ymin = -max_i/10),
fill = "blue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.12, xmax = max_i*0.20,
ymax = -0.3, ymin = -max_i/10),
fill = "purple")
xmas = xmas + geom_rect(aes(xmin = max_i*0.7, xmax = max_i*0.75,
ymax = -0.6, ymin = -max_i/10),
fill = "orange")
xmas = xmas + geom_rect(aes(xmin = max_i*0.8, xmax = max_i*0.9,
ymax = -0.4, ymin = -max_i/10),
fill = "steelblue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.6, xmax = max_i*0.64,
ymax = -0.2, ymin = -max_i/10),
fill = "red")
xmas = xmas + geom_text(aes(x = max_i * 0.5, y = max_i + 1),
label = "Frohe Weihnachten", color = "gold", size = 10)
xmas + theme_void() + theme(legend.position = "none",
panel.background = element_rect(fill="black"))
library(tidyverse)
xmas = ggplot()
max_i = 15
for(i in 2:max_i){
xmas = xmas + annotate(geom="polygon", x = c(max_i/2-i/2, max_i/2+i/2, max_i/2), y = c(max_i-i, max_i-i, (max_i-i)+2),
fill = "darkgreen")
}
xmas = xmas + geom_rect(aes(xmin = max_i*0.45, xmax = max_i*0.55,
ymax = 0, ymin = -max_i/10),
fill = "brown")
n_kugeln = 1000
farben = c("red", "#C0C0C0", "gold")
df_kugeln = data.frame(
x = vector(mode = "numeric", length = n_kugeln),
y = vector(mode = "numeric", length = n_kugeln),
farbe = vector(mode = "character", length = n_kugeln)
)
set.seed(24122023)
for(i in 1:n_kugeln){
df_kugeln$farbe[i] = sample(farben, 1)
df_kugeln$y[i] = abs(rnorm(1, sd = max_i / 2))
df_kugeln$y[i] = ifelse(df_kugeln$y[i] < 0.5, 0.5, df_kugeln$y[i])
df_kugeln$y[i] = ifelse(df_kugeln$y[i] > max_i - 2, max_i - 2, df_kugeln$y[i])
df_kugeln$x[i] = runif(1, min = max_i * (0.5 - (max_i - df_kugeln$y[i])/max_i*0.25),
max = max_i * (0.5 + (max_i - df_kugeln$y[i])/max_i*0.25))
}
xmas = xmas + geom_point(data = df_kugeln, aes(x, y, color = farbe), size = 8) +
scale_color_manual(values = farben)
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i - .5, max_i - .5, max_i + .5),
fill = "gold")
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i + 0.2, max_i + 0.2, max_i - 0.8),
fill = "gold")
xmas = xmas + geom_rect(aes(xmin = max_i*0.25, xmax = max_i*0.40,
ymax = -0.5, ymin = -max_i/10),
fill = "blue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.12, xmax = max_i*0.20,
ymax = -0.3, ymin = -max_i/10),
fill = "purple")
xmas = xmas + geom_rect(aes(xmin = max_i*0.7, xmax = max_i*0.75,
ymax = -0.6, ymin = -max_i/10),
fill = "orange")
xmas = xmas + geom_rect(aes(xmin = max_i*0.8, xmax = max_i*0.9,
ymax = -0.4, ymin = -max_i/10),
fill = "steelblue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.6, xmax = max_i*0.64,
ymax = -0.2, ymin = -max_i/10),
fill = "red")
xmas = xmas + geom_text(aes(x = max_i * 0.5, y = max_i + 1),
label = "Frohe Weihnachten", color = "gold", size = 10)
xmas + theme_void() + theme(legend.position = "none",
panel.background = element_rect(fill="black"))
library(tidyverse)
xmas = ggplot()
max_i = 15
for(i in 2:max_i){
xmas = xmas + annotate(geom="polygon", x = c(max_i/2-i/2, max_i/2+i/2, max_i/2), y = c(max_i-i, max_i-i, (max_i-i)+2),
fill = "darkgreen")
}
xmas = xmas + geom_rect(aes(xmin = max_i*0.45, xmax = max_i*0.55,
ymax = 0, ymin = -max_i/10),
fill = "brown")
n_kugeln = 10
farben = c("red", "#C0C0C0", "gold")
df_kugeln = data.frame(
x = vector(mode = "numeric", length = n_kugeln),
y = vector(mode = "numeric", length = n_kugeln),
farbe = vector(mode = "character", length = n_kugeln)
)
set.seed(24122023)
for(i in 1:n_kugeln){
df_kugeln$farbe[i] = sample(farben, 1)
df_kugeln$y[i] = abs(rnorm(1, sd = max_i / 2))
df_kugeln$y[i] = ifelse(df_kugeln$y[i] < 0.5, 0.5, df_kugeln$y[i])
df_kugeln$y[i] = ifelse(df_kugeln$y[i] > max_i - 2, max_i - 2, df_kugeln$y[i])
df_kugeln$x[i] = runif(1, min = max_i * (0.5 - (max_i - df_kugeln$y[i])/max_i*0.25),
max = max_i * (0.5 + (max_i - df_kugeln$y[i])/max_i*0.25))
}
xmas = xmas + geom_point(data = df_kugeln, aes(x, y, color = farbe), size = 8) +
scale_color_manual(values = farben)
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i - .5, max_i - .5, max_i + .5),
fill = "gold")
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i + 0.2, max_i + 0.2, max_i - 0.8),
fill = "gold")
xmas = xmas + geom_rect(aes(xmin = max_i*0.25, xmax = max_i*0.40,
ymax = -0.5, ymin = -max_i/10),
fill = "blue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.12, xmax = max_i*0.20,
ymax = -0.3, ymin = -max_i/10),
fill = "purple")
xmas = xmas + geom_rect(aes(xmin = max_i*0.7, xmax = max_i*0.75,
ymax = -0.6, ymin = -max_i/10),
fill = "orange")
xmas = xmas + geom_rect(aes(xmin = max_i*0.8, xmax = max_i*0.9,
ymax = -0.4, ymin = -max_i/10),
fill = "steelblue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.6, xmax = max_i*0.64,
ymax = -0.2, ymin = -max_i/10),
fill = "red")
xmas = xmas + geom_text(aes(x = max_i * 0.5, y = max_i + 1),
label = "Frohe Weihnachten", color = "gold", size = 10)
xmas + theme_void() + theme(legend.position = "none",
panel.background = element_rect(fill="black"))
library(tidyverse)
xmas = ggplot()
max_i = 15
for(i in 2:max_i){
xmas = xmas + annotate(geom="polygon", x = c(max_i/2-i/2, max_i/2+i/2, max_i/2), y = c(max_i-i, max_i-i, (max_i-i)+2),
fill = "darkgreen")
}
xmas = xmas + geom_rect(aes(xmin = max_i*0.45, xmax = max_i*0.55,
ymax = 0, ymin = -max_i/10),
fill = "brown")
n_kugeln = 20
farben = c("red", "#C0C0C0", "gold")
df_kugeln = data.frame(
x = vector(mode = "numeric", length = n_kugeln),
y = vector(mode = "numeric", length = n_kugeln),
farbe = vector(mode = "character", length = n_kugeln)
)
set.seed(24122023)
for(i in 1:n_kugeln){
df_kugeln$farbe[i] = sample(farben, 1)
df_kugeln$y[i] = abs(rnorm(1, sd = max_i / 2))
df_kugeln$y[i] = ifelse(df_kugeln$y[i] < 0.5, 0.5, df_kugeln$y[i])
df_kugeln$y[i] = ifelse(df_kugeln$y[i] > max_i - 2, max_i - 2, df_kugeln$y[i])
df_kugeln$x[i] = runif(1, min = max_i * (0.5 - (max_i - df_kugeln$y[i])/max_i*0.25),
max = max_i * (0.5 + (max_i - df_kugeln$y[i])/max_i*0.25))
}
xmas = xmas + geom_point(data = df_kugeln, aes(x, y, color = farbe), size = 8) +
scale_color_manual(values = farben)
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i - .5, max_i - .5, max_i + .5),
fill = "gold")
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i + 0.2, max_i + 0.2, max_i - 0.8),
fill = "gold")
xmas = xmas + geom_rect(aes(xmin = max_i*0.25, xmax = max_i*0.40,
ymax = -0.5, ymin = -max_i/10),
fill = "blue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.12, xmax = max_i*0.20,
ymax = -0.3, ymin = -max_i/10),
fill = "purple")
xmas = xmas + geom_rect(aes(xmin = max_i*0.7, xmax = max_i*0.75,
ymax = -0.6, ymin = -max_i/10),
fill = "orange")
xmas = xmas + geom_rect(aes(xmin = max_i*0.8, xmax = max_i*0.9,
ymax = -0.4, ymin = -max_i/10),
fill = "steelblue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.6, xmax = max_i*0.64,
ymax = -0.2, ymin = -max_i/10),
fill = "red")
xmas = xmas + geom_text(aes(x = max_i * 0.5, y = max_i + 1),
label = "Frohe Weihnachten", color = "gold", size = 10)
xmas + theme_void() + theme(legend.position = "none",
panel.background = element_rect(fill="black"))
xmas = xmas + geom_text(aes(x = max_i * 0.5, y = max_i + 1),
label = "Frohe Weihnachten, du Arschloch!", color = "gold", size = 10)
library(tidyverse)
xmas = ggplot()
max_i = 15
for(i in 2:max_i){
xmas = xmas + annotate(geom="polygon", x = c(max_i/2-i/2, max_i/2+i/2, max_i/2), y = c(max_i-i, max_i-i, (max_i-i)+2),
fill = "darkgreen")
}
xmas = xmas + geom_rect(aes(xmin = max_i*0.45, xmax = max_i*0.55,
ymax = 0, ymin = -max_i/10),
fill = "brown")
n_kugeln = 20
farben = c("red", "#C0C0C0", "gold")
df_kugeln = data.frame(
x = vector(mode = "numeric", length = n_kugeln),
y = vector(mode = "numeric", length = n_kugeln),
farbe = vector(mode = "character", length = n_kugeln)
)
set.seed(24122023)
for(i in 1:n_kugeln){
df_kugeln$farbe[i] = sample(farben, 1)
df_kugeln$y[i] = abs(rnorm(1, sd = max_i / 2))
df_kugeln$y[i] = ifelse(df_kugeln$y[i] < 0.5, 0.5, df_kugeln$y[i])
df_kugeln$y[i] = ifelse(df_kugeln$y[i] > max_i - 2, max_i - 2, df_kugeln$y[i])
df_kugeln$x[i] = runif(1, min = max_i * (0.5 - (max_i - df_kugeln$y[i])/max_i*0.25),
max = max_i * (0.5 + (max_i - df_kugeln$y[i])/max_i*0.25))
}
xmas = xmas + geom_point(data = df_kugeln, aes(x, y, color = farbe), size = 8) +
scale_color_manual(values = farben)
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i - .5, max_i - .5, max_i + .5),
fill = "gold")
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i + 0.2, max_i + 0.2, max_i - 0.8),
fill = "gold")
xmas = xmas + geom_rect(aes(xmin = max_i*0.25, xmax = max_i*0.40,
ymax = -0.5, ymin = -max_i/10),
fill = "blue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.12, xmax = max_i*0.20,
ymax = -0.3, ymin = -max_i/10),
fill = "purple")
xmas = xmas + geom_rect(aes(xmin = max_i*0.7, xmax = max_i*0.75,
ymax = -0.6, ymin = -max_i/10),
fill = "orange")
xmas = xmas + geom_rect(aes(xmin = max_i*0.8, xmax = max_i*0.9,
ymax = -0.4, ymin = -max_i/10),
fill = "steelblue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.6, xmax = max_i*0.64,
ymax = -0.2, ymin = -max_i/10),
fill = "red")
xmas = xmas + geom_text(aes(x = max_i * 0.5, y = max_i + 1),
label = "Frohe Weihnachten, du Arschloch!", color = "gold", size = 10)
xmas + theme_void() + theme(legend.position = "none",
panel.background = element_rect(fill="black"))
library(tidyverse)
xmas = ggplot()
max_i = 15
for(i in 2:max_i){
xmas = xmas + annotate(geom="polygon", x = c(max_i/2-i/2, max_i/2+i/2, max_i/2), y = c(max_i-i, max_i-i, (max_i-i)+2),
fill = "darkgreen")
}
xmas = xmas + geom_rect(aes(xmin = max_i*0.45, xmax = max_i*0.55,
ymax = 0, ymin = -max_i/10),
fill = "brown")
n_kugeln = 20
farben = c("red", "#C0C0C0", "gold")
df_kugeln = data.frame(
x = vector(mode = "numeric", length = n_kugeln),
y = vector(mode = "numeric", length = n_kugeln),
farbe = vector(mode = "character", length = n_kugeln)
)
set.seed(24122023)
for(i in 1:n_kugeln){
df_kugeln$farbe[i] = sample(farben, 1)
df_kugeln$y[i] = abs(rnorm(1, sd = max_i / 2))
df_kugeln$y[i] = ifelse(df_kugeln$y[i] < 0.5, 0.5, df_kugeln$y[i])
df_kugeln$y[i] = ifelse(df_kugeln$y[i] > max_i - 2, max_i - 2, df_kugeln$y[i])
df_kugeln$x[i] = runif(1, min = max_i * (0.5 - (max_i - df_kugeln$y[i])/max_i*0.25),
max = max_i * (0.5 + (max_i - df_kugeln$y[i])/max_i*0.25))
}
xmas = xmas + geom_point(data = df_kugeln, aes(x, y, color = farbe), size = 8) +
scale_color_manual(values = farben)
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i - .5, max_i - .5, max_i + .5),
fill = "gold")
xmas = xmas + annotate(geom="polygon", x = c(max_i * 0.45, max_i * 0.55, max_i * 0.5),
y = c(max_i + 0.2, max_i + 0.2, max_i - 0.8),
fill = "gold")
xmas = xmas + geom_rect(aes(xmin = max_i*0.25, xmax = max_i*0.40,
ymax = -0.5, ymin = -max_i/10),
fill = "blue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.12, xmax = max_i*0.20,
ymax = -0.3, ymin = -max_i/10),
fill = "purple")
xmas = xmas + geom_rect(aes(xmin = max_i*0.7, xmax = max_i*0.75,
ymax = -0.6, ymin = -max_i/10),
fill = "orange")
xmas = xmas + geom_rect(aes(xmin = max_i*0.8, xmax = max_i*0.9,
ymax = -0.4, ymin = -max_i/10),
fill = "steelblue")
xmas = xmas + geom_rect(aes(xmin = max_i*0.6, xmax = max_i*0.64,
ymax = -0.2, ymin = -max_i/10),
fill = "red")
xmas = xmas + geom_text(aes(x = max_i * 0.5, y = max_i + 1),
label = "Frohe Weihnachten", color = "gold", size = 10)
xmas + theme_void() + theme(legend.position = "none",
panel.background = element_rect(fill="black"))
install.packages("xmas")
install.packages("christmas")
christmas::xmasgalton()
christmas::xmashelix()
christmas::xmascaganer()
christmas::xmashealth()
christmas::xmasepitree()
xmas = function (year = 2024, seed = NULL)
{
if (!inherits(year, c("numeric", "integer")) ||
length(year) != 1L)
stop("'year' must be a number")
if (!is.null(seed) & (is.na(seed) || !is(seed, "numeric")))
stop("'seed' must be numeric or NULL")
if (!is.null(seed))
set.seed(seed)
words <- c("SQL", "MariaDB", "SQLite", "Loop", "Function", "Branch", "Parallel",
"Efficient Coding", "Simulation", "Sequence", "apply", "R6",
"OOP", "Class", "POP", "Recursion", "Package", "Development", "Description",
"Namespace", "Liberary", "Web Scraping", "Database System", "Error Handling",
"Write Comment")
words <- unique(words)
nc <- sapply(words, nchar)
dd <- data.frame(word = words, nc)
ord <- with(dd, order(word, nc))
dd <- dd[ord, ]
rownames(dd) <- NULL
ncs <- sort(unique(dd$nc))
lncs <- length(ncs)
selwords <- sapply(ncs, FUN = function(x) christmas:::getword(data = dd,
numchars = x))
christmas:::newwindow()
xmin <- -4
xmax <- 4
ymin <- 0
ymax <- max(ncs) + 6
myvfont <- c("serif", "bold")
plot(c(xmin, xmax), c(ymin, ymax), type = "n", axes = FALSE,
xlab = "", ylab = "")
loglabels <- c("POLITICAL SCIENCE", "STATISTICS")
Sys.sleep(1)
for (i in 1:length(loglabels)) {
text(x = 0, y = ymin + 1 + i, labels = loglabels[i],
vfont = myvfont, cex = 1.7, col = "brown")
Sys.sleep(1)
}
for (i in length(selwords):1) {
text(x = 0, y = ymax - ncs[i] - 2, labels = selwords[i],
vfont = myvfont, cex = 2, col = "forestgreen")
Sys.sleep(0.3)
}
Sys.sleep(0.7)
text(x = 0, y = ymax - 0.5, labels = paste0("HAPPY ",
year, "!"), vfont = myvfont, cex = 4, col = "red")
Sys.sleep(1.5)
text(x = 0, y = max(ncs) + 2.5, labels = "R", srt = 15,
vfont = myvfont, cex = 6, col = "gold")
}
xmas()
test <- rio::import(file.choose())
table(test$female)
View(test)
test2 = haven::read_dta(file.choose())
View(test2)
?haven
test3 = haven::read_dta(file.choose())
test3$female
library(RSelenium)
library(RSelenium)
library(stringr)
library(rvest)
library(dplyr)
url <- "https://en.wikipedia.org/wiki/Salvadoran_gang_crackdown#cite_note-AJ:_extension_2-53"
url_page = read_html(url)
Leg_assembly = url_page %>% html_nodes('table') %>%
.[6] %>% html_table() %>% .[[1]]
url <- "https://en.wikipedia.org/wiki/Opinion_polling_on_the_Nayib_Bukele_presidency"
url_page = read_html(url)
app_rate = url_page %>% html_nodes('table') %>%
.[7] %>% html_table() %>% .[[1]]
app_rate
library(stringr)
library(tidyverse)
library(tidyr)
library(lubridate)
library(dplyr)
# mutate column votes into pro_exception and against_exception
Leg_assembly_clean <- Leg_assembly %>%
separate(Votes, into = c("against_exception", "pro_exception"), sep = "/")
# remove the reference column
Leg_assembly_clean <- Leg_assembly_clean %>%
select(-Ref.)
# set column data as date
Leg_assembly_clean$Date <- dmy(Leg_assembly_clean$Date)
# now remove all the + symbols since its clear that there are in all cases (incarcerations of gang members) more then descibed and are anyway only estimations as always in these cases
Leg_assembly_clean$Arrests <- gsub("\\+", "", Leg_assembly_clean$Arrests)
# remove the commas and make numeric
Leg_assembly_clean <- Leg_assembly_clean %>%
mutate(
against_exception = as.numeric(gsub(",", "", against_exception)),
pro_exception = as.numeric(gsub(",", "", pro_exception)),
Arrests = as.numeric(gsub(",", "", Arrests))
)
# clean the second data frame app_rate
app_rate_clean <- app_rate[-c(1,2),]
app_rate_clean <- app_rate_clean[ , -((ncol(app_rate_clean)-1):ncol(app_rate_clean))]
app_rate_clean <- app_rate_clean %>%
mutate_at(vars(Samplesize, Oppose, Unsure, Lead),
list(~as.numeric(ifelse(. %in% c("-", "–") | is.na(.), NA, gsub(",", "", .)))))
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="1–6 Mar 2023"] <- "March 2023"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="5 Sept 2022"] <- "September 2022"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="30 May 2022"] <- "May 2022"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Jun 2023"] <- "June 2023"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Apr 2023"] <- "April 2023"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Feb 2023"] <- "February 2023"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Jan 2023"] <- "January 2023"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Dec 2022"] <- "December 2023"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Nov 2022"] <- "November 2022"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Oct 2022"] <- "October 2022"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Sept 2022"] <- "September 2022"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Aug 2022"] <- "August 2022"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Jul 2022"] <- "July 2022"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Jun 2022"] <- "June 2022"
app_rate_clean$`Fieldwork date`[app_rate_clean$`Fieldwork date`=="Mar 2023"] <- "March 2023"
app_rate_clean$`Fieldwork date` <- parse_date_time(app_rate_clean$`Fieldwork date`, orders = c("bY", "B Y"))
names(app_rate_clean)[names(app_rate_clean) == 'Fieldwork date'] <- 'Date'
# Set date to Month Year
Leg_assembly_clean <- Leg_assembly_clean %>%
mutate(Month_Year = format(Date, "%b %Y"))
app_rate_clean <- app_rate_clean %>%
mutate(Month_Year = format(Date, "%b %Y"))
# mergen on the new Month_Year column
merged_data <- full_join(Leg_assembly_clean, app_rate_clean, by = 'Month_Year')
merged_data <- subset(merged_data, select = -c(Date.x, Date.y))
library(DBI)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), dbname = "my_database.db")
dbWriteTable(con, "gang crackdown", merged_data, overwrite = TRUE)
query_support_extremes <- "SELECT * FROM 'gang crackdown' WHERE support IN (SELECT MAX(support), MIN(support) FROM 'gang crackdown')
ORDER BY support DESC"
result_support_extremes <- dbSendQuery(con, query_support_extremes)
query_support_extremes <- "SELECT * FROM 'gang crackdown' WHERE support = (SELECT MAX(support) FROM 'gang crackdown')
UNION
SELECT * FROM 'gang crackdown' WHERE support = (SELECT MIN(support) FROM 'gang crackdown')
ORDER BY support DESC"
result_support_extremes <- dbSendQuery(con, query_support_extremes)
support_extremes <- dbFetch(result_support_extremes, n = -1)
support_extremes
query_support_extremes <- "SELECT MAX(support), MIN(support) FROM 'gang crackdown'"
result_support_extremes <- dbSendQuery(con, query_support_extremes)
support_extremes <- dbFetch(result_support_extremes, n = -1)
support_extremes
query_support_extremes <- "SELECT * FROM 'gang crackdown' WHERE support IN (SELECT MAX(support), MIN(support) FROM 'gang crackdown')
ORDER BY support DESC"
result_support_extremes <- dbSendQuery(con, query_support_extremes)
query_support_extremes <- "SELECT * FROM 'gang crackdown' WHERE support IN pivot(SELECT MAX(support), MIN(support) FROM 'gang crackdown')
ORDER BY support DESC"
result_support_extremes <- dbSendQuery(con, query_support_extremes)
exp(0.75)
=0.011 * 100000 + 0.007 * 50000
0.011 * 100000 + 0.007 * 50000
0.011 * 100000 + 0.007 * 100000
10000 - 72.34
remotes::install_github("jineichen/MedialandscrapeR")
MedialandscrapeR::mediascraper("Watson")
?MedialandscrapeR::mediascraper("Watson")
?MedialandscrapeR::mediascraper("all", plots = TRUE, sqldb = TRUE)
MedialandscrapeR::mediascraper("all", plots = TRUE, sqldb = TRUE)
MedialandscrapeR::mediascraper("All", plots = TRUE, sqldb = TRUE)
unloadNamespace(DBI)
unloadNamespace("DBI")
unloadNamespace("RSQLite")
unloadNamespace("DBI")
MedialandscrapeR::mediascraper("All", plots = TRUE, sqldb = TRUE)
schlegel::swiss_popular_bills
View(schlegel::swiss_popular_bills)
table(schlegel::swiss_popular_bills$topic)
table(schlegel::affairs$topics)
nrow(schlegel::affairs)
nrow(schlegel::affairs$text)
schlegel::affairs$text
sapply(schlegel::affairs$topics, strsplit, ";")
unlist(sapply(schlegel::affairs$topics, strsplit, ";"))
unlist(sapply(schlegel::affairs$topics, stringr::str_split, ";"))
unlist(sapply(schlegel::affairs$topics, stringr::str_split, "; "))
sapply(schlegel::affairs$topics, stringr::str_split_, "; ")
sapply(schlegel::affairs$topics, stringr::str_split, "; ")
unlist(sapply(schlegel::affairs$topics, stringr::str_split, "; "))
x = unlist(sapply(schlegel::affairs$topics, stringr::str_split, "; "))
x
names(x) = NULL
x
table(x)
install.packages("swissparl")
swissparl::get_tables()
swissparl::get_data("Bill")
swissparl::get_tables()
?swissparl::get_data("PersonCommunication")
setwd("C:\\Users\\benja\\Documents\\GitHub\\glm.predict")
library(devtools)
unloadNamespace("rlang")
